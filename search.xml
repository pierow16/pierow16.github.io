<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>boostrap 4使用手册</title>
    <url>/2022/05/01/boostrap/</url>
    <content><![CDATA[<p>关于bootstrap的一些记录</p>
<span id="more"></span>

<blockquote>
<p>Responsive Design（响应式设计）。</p>
</blockquote>
<h2 id="引入bootsrap"><a href="#引入bootsrap" class="headerlink" title="引入bootsrap"></a>引入bootsrap</h2><blockquote>
<p><code>&lt;link href=&quot;https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/4.5.3/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt;</code></p>
</blockquote>
<h2 id="Fluid容器"><a href="#Fluid容器" class="headerlink" title="Fluid容器"></a>Fluid容器</h2><p><code>&lt;div class=&quot;container-fluid&quot;&gt;&lt;/div&gt;</code></p>
<h2 id="图片自适应"><a href="#图片自适应" class="headerlink" title="图片自适应"></a>图片自适应</h2><ol>
<li><code>&lt;img class=&quot;.img-fluid&quot;&gt;&lt;/img&gt;</code></li>
<li>或者<code>max-width: 100%、height:auto;</code></li>
</ol>
<h2 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h2><ol>
<li><p>居中</p>
<blockquote>
<p><code>class=&quot;text-center&quot;</code></p>
</blockquote>
</li>
<li><p>颜色 </p>
 <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text-muted&quot;</span>&gt;</span>柔和的文本。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text-primary&quot;</span>&gt;</span>重要的文本。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text-success&quot;</span>&gt;</span>执行成功的文本。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text-info&quot;</span>&gt;</span>代表一些提示信息的文本。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text-warning&quot;</span>&gt;</span>警告文本。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text-danger&quot;</span>&gt;</span>危险操作文本。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text-secondary&quot;</span>&gt;</span>副标题。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text-dark&quot;</span>&gt;</span>深灰色文字。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text-light&quot;</span>&gt;</span>浅灰色文本（白色背景上看不清楚）。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text-white&quot;</span>&gt;</span>白色文本（白色背景上看不清楚）。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h2><ol>
<li>定义<blockquote>
<p><code>&lt;button type=&quot;button&quot; class=&quot;btn btn-info&quot;&gt;&lt;/button&gt;</code></p>
</blockquote>
</li>
<li>颜色<blockquote>
<p>btn-primary&#x2F;btn-secondary&#x2F;btn-success&#x2F;btn-danger&#x2F;btn-warning&#x2F;btn-info&#x2F;btn-light&#x2F;btn-dark&#x2F;btn-link</p>
</blockquote>
</li>
<li>导航和导航条组件只支持 <code>&lt;button&gt;</code> 元素</li>
<li>通过给按钮添加 ​<code>.btn-block</code>​ 类可以将其拉伸至父元素100%的宽度，而且按钮也变为了<b>块级</b>（block）元素。</li>
</ol>
<h2 id="网格"><a href="#网格" class="headerlink" title="网格"></a>网格</h2><blockquote>
<p><code>class=&quot;col-6&quot;</code>表示6&#x2F;12 占6列 剩下6列其他的平分</p>
</blockquote>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span><br><span class="line">  &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span><br><span class="line">    &lt;button <span class="built_in">class</span>=<span class="string">&quot;btn btn-primary btn-block&quot;</span>&gt;Like&lt;/button&gt; </span><br><span class="line">  &lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">  &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span><br><span class="line">    &lt;button <span class="built_in">class</span>=<span class="string">&quot;btn btn-light btn-block&quot;</span>&gt;Star&lt;/button&gt;</span><br><span class="line">  &lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure>
<h2 id="span-标签创建行内元素"><a href="#span-标签创建行内元素" class="headerlink" title="span 标签创建行内元素"></a>span 标签创建行内元素</h2><p>通过使用行内元素 span，可以把不同的元素放在同一行，甚至能为一个元素的不同部分指定样式。<br><code>&lt;p&gt;兔子的眼睛为什么是&lt;span class=&quot;text-danger&quot;&gt;红色&lt;/span&gt;的?&lt;/p&gt;</code></p>
<h2 id="字体图标"><a href="#字体图标" class="headerlink" title="字体图标"></a>字体图标</h2><ol>
<li>图标库<ul>
<li>Font Awesome</li>
<li>Iconic</li>
<li>Octicons</li>
</ul>
</li>
<li>以Font Awesome为例<blockquote>
<ol>
<li>引入库<br><code>&lt;link href=&quot;https://cdn.bootcdn.net/ajax/libs/font-awesome/5.15.1/css/all.min.css&quot; rel=&quot;stylesheet&quot;&gt;</code></li>
</ol>
</blockquote>
</li>
</ol>
<blockquote>
<ol start="2">
<li>使用：给 i 元素添加 class 属性 fas 和 fa-info-circle；<br>  <code>&lt;i class=&quot;fas fa-info-circle&quot;&gt;&lt;/i&gt; </code></li>
<li>常见小图标</li>
</ol>
</blockquote>
<ul>
<li><code>class=&quot;fas fa-thumbs-up&quot;</code> 点赞</li>
<li><code>class=&quot;fas fa-star&quot;</code> 星星&#x2F;收藏夹</li>
<li><code>class=&quot;fas fa-trash&quot;</code> 垃圾桶&#x2F;删除</li>
<li><code>class=&quot;fa fa-paper-plane&quot;</code> 发送&#x2F;纸飞机</li>
</ul>
<h2 id="form"><a href="#form" class="headerlink" title="form"></a>form</h2><blockquote>
<p>将 Bootstrap 的 col-* class 用在 form 元素上。这样我们就可以在不关心屏幕大小的情况下，将我们的单选按钮均匀的平铺在页面上。</p>
</blockquote>
<ol>
<li>输入框<blockquote>
<p>在<code>class=&quot;form-control&quot;</code>作用下,<br>  <code>&lt;input&gt;,&lt;textarea&gt;,&lt;select&gt;</code>元素宽度都是100%</p>
</blockquote>
</li>
<li>单选&#x2F;复选 –横铺平分<blockquote>
<p>div.row + div.col-3</p>
</blockquote>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> <span class="keyword">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span><br><span class="line">  &lt;<span class="keyword">div</span> <span class="keyword">class</span>=<span class="string">&quot;col-3&quot;</span>&gt;</span><br><span class="line">    &lt;label&gt;&lt;input name=<span class="string">&quot;fruit&quot;</span> type=<span class="string">&quot;radio&quot;</span> value=<span class="string">&quot;苹果&quot;</span> checked <span class="regexp">/&gt;苹果 &lt;/</span>label&gt; </span><br><span class="line">  &lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">  &lt;<span class="keyword">div</span> <span class="keyword">class</span>=<span class="string">&quot;col-3&quot;</span>&gt;</span><br><span class="line">    &lt;label&gt;&lt;input name=<span class="string">&quot;fruit&quot;</span> type=<span class="string">&quot;radio&quot;</span> value=<span class="string">&quot;梨&quot;</span> <span class="regexp">/&gt;梨 &lt;/</span>label&gt;</span><br><span class="line">  &lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Web-ui</category>
        <category>bootstrap</category>
      </categories>
      <tags>
        <tag>bootsrap</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 组件</title>
    <url>/2022/04/22/vue/vue%E7%BB%84%E4%BB%B6/</url>
    <content><![CDATA[<p>vue笔记，组件篇</p>
<span id="more"></span>
<h1 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h1><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><blockquote>
<p>每个组件必须只有一个根元素</p>
</blockquote>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;组件名&#x27;</span>,&#123;</span><br><span class="line">    data:<span class="keyword">function</span><span class="params">()</span>&#123;&#125;,</span><br><span class="line">    template:<span class="string">&#x27;html代码&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<ol>
<li>组件可复用</li>
<li>一个组件的 data 选项必须是一个函数，因此每个实例可以维护一份被返回对象的独立的拷贝<blockquote>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button-counter</span>&gt;</span><span class="tag">&lt;/<span class="name">button-counter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button-counter</span>&gt;</span><span class="tag">&lt;/<span class="name">button-counter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button-counter</span>&gt;</span><span class="tag">&lt;/<span class="name">button-counter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 定义一个名为 button-counter 的新组件</span></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;button-counter&#x27;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//组件的data必须是个函数</span></span></span><br><span class="line"><span class="language-javascript">  <span class="attr">data</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">count</span>: <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">template</span>: <span class="string">&#x27;&lt;button v-on:click=&quot;count++&quot;&gt;你点击了 &#123;&#123; count &#125;&#125; 次.&lt;/button&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">msg</span>: <span class="string">&quot;hello world&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">list</span>: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="组件的组织"><a href="#组件的组织" class="headerlink" title="组件的组织"></a>组件的组织</h2><h3 id="组件的注册"><a href="#组件的注册" class="headerlink" title="组件的注册"></a>组件的注册</h3><ol>
<li>全局祖册</li>
</ol>
<ul>
<li>通过 Vue.component 全局注册<blockquote>
<p>全局注册的组件可以用在其被注册之后的任何 (通过 new Vue) 新创建的 Vue 根实例，也包括其组件树中的所有子组件的模板中。<br><code>Vue.component(&#39;my-component-name&#39;,&#123;// ... 选项 ...&#125;)</code></p>
</blockquote>
<h3 id="组件间的传值"><a href="#组件间的传值" class="headerlink" title="组件间的传值"></a>组件间的传值</h3></li>
</ul>
<ol>
<li>父組件 通过<em> Prop </em>向子组件传递数据<blockquote>
<p>必须在prop里定义了属性才能拿到属性值！<br>Prop 是你可以在组件上注册的一些自定义特性。当一个值传递给一个 prop 特性的时候，它就变成了那个组件实例的一个属性。<br>一个组件默认可以拥有任意数量的 prop，任何值都可以传递给任何 prop。在组件实例中能访问这个值，就像访问 data 中的值一样。</p>
</blockquote>
</li>
</ol>
<p>例如:  </p>
<figure class="highlight handlebars"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="comment">&lt;!-- 一个 prop 被注册之后，可以像这样把数据作为一个自定义特性传递进来 --&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">blog-post</span> <span class="attr">title</span>=<span class="string">&quot;名侦探柯南&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">// 定义一个名为 blog-post 的新组件(子组件)</span></span><br><span class="line"><span class="language-xml">Vue.component(&#x27;blog-post&#x27;, &#123;</span></span><br><span class="line"><span class="language-xml">Vue.component(&#x27;blog-post&#x27;, &#123;</span></span><br><span class="line"><span class="language-xml">  props: [&#x27;title&#x27;],</span></span><br><span class="line"><span class="language-xml">  template: &#x27;<span class="tag">&lt;<span class="name">h3</span>&gt;</span></span><span class="template-variable">&#123;&#123; <span class="name">title</span> &#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">h3</span>&gt;</span>&#x27;</span></span><br><span class="line"><span class="language-xml">  //<span class="tag">&lt;<span class="name">h3</span>&gt;</span>名侦探柯南<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">&#125;)</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>在 data 里有一个博文的数组</p>
</blockquote>
<figure class="highlight handlebars"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">blog-post</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">v-for</span>=<span class="string">&quot;post in posts&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">:key</span>=<span class="string">&quot;post.id&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">:title</span>=<span class="string">&quot;post.title&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">:author</span>=<span class="string">&quot;post.author&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">:description</span>=<span class="string">&quot;post.description&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">&gt;</span><span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;blog-post&#x27;</span>, &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">props</span>:[<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;author&#x27;</span>, <span class="string">&#x27;description&#x27;</span>],</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">template</span>: <span class="string">&#x27;&lt;div&gt;&lt;h3&gt;</span></span></span><span class="template-variable">&#123;&#123; <span class="name">title</span> &#125;&#125;</span><span class="language-xml"><span class="language-handlebars"><span class="language-xml"><span class="tag">&lt;/<span class="name">h3</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>作者: </span></span></span><span class="template-variable">&#123;&#123; <span class="name">author</span> &#125;&#125;</span><span class="language-xml"><span class="language-handlebars"><span class="language-xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><span class="template-variable">&#123;&#123; <span class="name">description</span> &#125;&#125;</span><span class="language-xml"><span class="language-handlebars"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#x27;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">&#125;)</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml"></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">var vm = new Vue(&#123;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">  el:&#x27;#app&#x27;,</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">  data: &#123;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    posts: [</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">      &#123; id: 1, title: &#x27;文章1&#x27;, author:&#x27;Loen&#x27;, description: &quot;111111&quot;&#125;,</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">      &#123; id: 2, title: &#x27;文章2&#x27;, author: &#x27;Kelly&#x27;, description: &quot;222222&quot; &#125;,</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">      &#123; id: 3, title: &#x27;文章3&#x27;, author: &#x27;Nier&#x27;, description: &quot;333333&quot; &#125;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    ]</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">  &#125;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">&#125;);</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml"></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li>prop里要放很多东西时候可以重构让 <code>&lt;blog-post&gt; </code>组件接受一个单独的 post prop<figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- 第三步：展示组件内容 --&gt;</span></span></span><br><span class="line"><span class="language-xml">    </span><span class="language-xml"><span class="tag">&lt;<span class="name">blog-post</span> <span class="attr">v-for</span>=<span class="string">&quot;post in posts&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;post.id&quot;</span> <span class="attr">:post</span>=<span class="string">&quot;post&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 第二步：定义一个名为 blog-post 的新组件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;blog-post&#x27;</span>, </span></span><span class="language-xquery">&#123;</span></span><br><span class="line"><span class="language-xquery">  props:[<span class="string">&#x27;post&#x27;</span>],</span></span><br><span class="line"><span class="language-xquery">  template: `</span></span><br><span class="line"><span class="language-xquery">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;blog-post&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-xquery">      </span><span class="language-xml"><span class="tag">&lt;<span class="name">h3</span>&gt;</span></span><span class="language-xquery">&#123;&#123; post.title &#125;</span></span><span class="language-xml"><span class="language-handlebars"><span class="language-xml">&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span></span></span><br><span class="line">      <span class="language-xml"><span class="language-handlebars"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">&quot;post.content&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  `</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">//第一步：初始化实例</span><br><span class="line">var vm = new Vue(&#123;</span><br><span class="line">  el:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    // 这里的数据可以从数据库读取。</span><br><span class="line">    posts: [</span><br><span class="line">      &#123;<span class="built_in"> id</span>: <span class="number">1</span>, title: <span class="string">&#x27;文章1&#x27;</span>, author:<span class="string">&#x27;Loen&#x27;</span>, content: <span class="string">&quot;111111&quot;</span>&#125;,</span><br><span class="line">      &#123;<span class="built_in"> id</span>: <span class="number">2</span>, title: <span class="string">&#x27;文章2&#x27;</span>, author: <span class="string">&#x27;Kelly&#x27;</span>, content: <span class="string">&quot;222222&quot;</span> &#125;,</span><br><span class="line">      &#123;<span class="built_in"> id</span>: <span class="number">3</span>, title: <span class="string">&#x27;文章3&#x27;</span>, author: <span class="string">&#x27;Nier&#x27;</span>, content: <span class="string">&quot;333333&quot;</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h3 id="监听子组件事件-emit"><a href="#监听子组件事件-emit" class="headerlink" title="监听子组件事件  $emit"></a>监听子组件事件  $emit</h3><blockquote>
<p>在开发 <code>&lt;blog-post&gt; </code>组件时，它的一些功能可能要和父级组件进行沟通。</p>
</blockquote>
</li>
<li>例如我们可能会引入一个辅助功能来放大博文的字号，同时让页面的其它部分保持默认的字号。在其父组件中，我们可以通过添加一个 postFontSize 数据属性来支持这个功能：<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!-- 父组件 --&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">&quot;</span></span></span><span class="template-variable">&#123; fontSize: postFontSize + &#x27;em&#x27; &#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">blog-post</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">v-for</span>=<span class="string">&quot;post in posts&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">:key</span>=<span class="string">&quot;post.id&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">:post</span>=<span class="string">&quot;post&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">v-on:enlarge-text</span>=<span class="string">&quot;postFontSize += 0.1&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">&gt;</span><span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 子组件可以通过调用内建的 $emit 方法 并传入事件名称来触发一个事件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;blog-post&#x27;</span>, </span></span><span class="template-variable">&#123;</span></span><br><span class="line"><span class="template-variable">  props:[&#x27;post&#x27;],</span></span><br><span class="line"><span class="template-variable">  template: `</span></span><br><span class="line"><span class="template-variable">    &lt;div class=&quot;blog-post&quot;&gt;</span></span><br><span class="line"><span class="template-variable">      &lt;h3&gt;&#123;&#123; post.title &#125;</span><span class="language-xml"><span class="language-handlebars"><span class="language-xml">&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">      <span class="comment">&lt;!-- $emit --&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;$emit(&#x27;enlarge-text&#x27;)&quot;</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        Enlarge text</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">&quot;post.content&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">  `</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">&#125;)</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">var vm = new Vue(</span></span></span><span class="template-variable">&#123;</span></span><br><span class="line"><span class="template-variable">  el:&#x27;#app&#x27;,</span></span><br><span class="line"><span class="template-variable">  data: &#123;</span></span><br><span class="line"><span class="template-variable">    postFontSize: 1,</span></span><br><span class="line"><span class="template-variable">    posts: [</span></span><br><span class="line"><span class="template-variable">      &#123; id: 1, title: &#x27;文章1&#x27;, author:&#x27;Loen&#x27;, content: &quot;111111&quot;&#125;</span><span class="language-xml">,</span></span><br><span class="line"><span class="language-xml">      </span><span class="template-variable">&#123; id: 2, title: &#x27;文章2&#x27;, author: &#x27;Kelly&#x27;, content: &quot;222222&quot; &#125;</span><span class="language-xml">,</span></span><br><span class="line"><span class="language-xml">      </span><span class="template-variable">&#123; id: 3, title: &#x27;文章3&#x27;, author: &#x27;Nier&#x27;, content: &quot;333333&quot; &#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    ]</span></span><br><span class="line"><span class="language-xml">  &#125;</span></span><br><span class="line"><span class="language-xml">&#125;);</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Vue</category>
        <category>组件</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue2.0使用手册 2</title>
    <url>/2022/04/20/vue/vue2.0(2)/</url>
    <content><![CDATA[<p>vue2笔记-事件篇</p>
<span id="more"></span>
<h1 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h1><blockquote>
<p>v-on 可以接收一个需要调用的方法名称</p>
</blockquote>
<h2 id="三种调用方法"><a href="#三种调用方法" class="headerlink" title="三种调用方法"></a>三种调用方法</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;greet&quot;</span>&gt;</span>打招呼<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;say(&#x27;嗨&#x27;)&quot;</span>&gt;</span>说 嗨<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;say(&#x27;为什么&#x27;, $event)&quot;</span>&gt;</span>说 为什么<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="comment">&lt;!--用特殊变量 $event 传入方法  将dom作为第二个参数传过去--&gt;</span></span><br><span class="line">// 也可以用 JavaScript 直接调用方法</span><br><span class="line">// vm.greet() // =&gt; &#x27;Hello Vue.js!&#x27;</span><br></pre></td></tr></table></figure>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">    greet: function (event) &#123;</span><br><span class="line">      <span class="comment">// `this` 在方法里指向当前 Vue 实例</span></span><br><span class="line">      <span class="built_in">alert</span>(&#x27;你好 &#x27; + this.name + &#x27;!&#x27;)</span><br><span class="line">      <span class="comment">// `event` 是原生 DOM 事件  传该dom对象</span></span><br><span class="line">      if (event) &#123;</span><br><span class="line">        <span class="built_in">alert</span>(event.target.tagName)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    say: function(msg, event)&#123;</span><br><span class="line">      <span class="built_in">alert</span>(msg);</span><br><span class="line">      <span class="built_in">if</span>(event)&#123;</span><br><span class="line">        <span class="built_in">alert</span>(event.target.tagName)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h2 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h2><blockquote>
<p>.stop&#x2F;.prevent&#x2F;.capture&#x2F;.self&#x2F;.once(2.1.4)&#x2F;.passive(2.3.0)</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 阻止单击事件继续传播 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.stop</span>=<span class="string">&quot;doThis&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 提交事件不再重载页面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>=<span class="string">&quot;onSubmit&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 修饰符可以串联 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.stop.prevent</span>=<span class="string">&quot;doThat&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 只有修饰符 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 添加事件监听器时使用事件捕获模式 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 即内部元素触发的事件先在此处理，然后才交由内部元素进行处理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:click.capture</span>=<span class="string">&quot;doThis&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 只当在 event.target 是当前元素自身时触发处理函数 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 即事件不是从内部元素触发的 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:click.self</span>=<span class="string">&quot;doThat&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 点击事件将只会触发一次 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.once</span>=<span class="string">&quot;doThis&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 滚动事件的默认行为 (即滚动行为) 将会立即触发 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 而不会等待 `onScroll` 完成  --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 这其中包含 `event.preventDefault()` 的情况 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- .passive 修饰符尤其能够提升移动端的性能。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:scroll.passive</span>=<span class="string">&quot;onScroll&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="按键修饰符"><a href="#按键修饰符" class="headerlink" title="按键修饰符"></a>按键修饰符</h2><blockquote>
<p>Vue 允许为 v-on 在监听键盘事件时添加。</p>
</blockquote>
<ul>
<li>.enter&#x2F;.tab&#x2F;.delete(捕获“删除”和“退格”键)&#x2F;.esc&#x2F;.space&#x2F;.up&#x2F;.down &#x2F;.left&#x2F;.right </li>
<li>keyCode也可以-&gt;  <code>&lt;input v-on:keyup.13=&quot;submit&quot;&gt;</code></li>
<li><code>&lt;input v-on:keyup.enter=&quot;submit&quot;&gt;</code><h2 id="系统修饰键"><a href="#系统修饰键" class="headerlink" title="系统修饰键"></a>系统修饰键</h2><blockquote>
<p>Vue 2.1.0 新增如下修饰符来实现仅在按下相应按键时才触发鼠标或键盘事件的监听器。</p>
</blockquote>
</li>
<li>.ctrl .alt .shift .meta<blockquote>
<p>*在 Mac 系统键盘上，meta 对应 command 键 (⌘)。<br> 在 Windows 系统键盘 meta 对应 Windows 徽标键 (⊞)。<br> 在 Sun 操作系统键盘上，meta 对应实心宝石键 (◆)。</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Alt + C --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> @<span class="attr">keyup.alt.67</span>=<span class="string">&quot;clear&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Ctrl + Click --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> @<span class="attr">click.ctrl</span>=<span class="string">&quot;doSomething&quot;</span>&gt;</span>Do something<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="鼠标按钮修饰符"><a href="#鼠标按钮修饰符" class="headerlink" title="鼠标按钮修饰符"></a>鼠标按钮修饰符</h2><blockquote>
<p>Vue 2.2.0 新增 .这些修饰符会限制处理函数仅响应特定的鼠标按钮。</p>
</blockquote>
</li>
<li>.left  .right  .middle<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.right</span>=<span class="string">&quot;greet&quot;</span>&gt;</span>鼠标右键点击(Greet)<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.left</span>=<span class="string">&quot;say(&#x27;嗨&#x27;)&quot;</span>&gt;</span>鼠标左键点击(说 嗨)<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.middle</span>=<span class="string">&quot;say(&#x27;为什么&#x27;)&quot;</span>&gt;</span>鼠标中间按钮点击(说 为什么)<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="监听input-的-键盘ctrl-回车事件"><a href="#监听input-的-键盘ctrl-回车事件" class="headerlink" title="监听input 的 键盘ctrl+回车事件"></a>监听input 的 键盘ctrl+回车事件</h3><p><code>&lt;input @keydown.ctrl.enter=&quot;greet&quot; &gt;</code></p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue 2.0</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue2.0使用手册 表单</title>
    <url>/2022/04/25/vue/vue%E8%A1%A8%E5%8D%95/</url>
    <content><![CDATA[<p>vue笔记-表单篇</p>
<span id="more"></span>
<h1 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h1><blockquote>
<p>v-model&#x3D;”被监听的属性” 被监听的属性<em>必须现在data里初始化&#x2F;定义</em><br>用v-model 指令在表单 <code>&lt;input&gt; &lt;textarea&gt; </code>及 <code>&lt;select&gt; </code>元素上创建双向数据绑定。它会根据控件类型自动选取正确的方法来更新元素。它负责监听用户的输入事件以更新数据，并对一些极端场景进行一些特殊处理。<br>v-model 会忽略所有表单元素的 value、checked、selected 特性的初始值而总是将 Vue 实例的数据作为数据来源。你应该通过 JavaScript 在组件的 data 选项中声明初始值。<br>v-model 在内部为不同的输入元素使用不同的属性并抛出不同的事件：</p>
</blockquote>
<ul>
<li>text 和 textarea 元素使用 value 属性和 input 事件；</li>
<li>checkbox 和 radio 使用 checked 属性和 change 事件；</li>
<li>select 字段将 value 作为 prop 并将 change 作为事件。<h2 id="似乎v-model-在-value不存在时候取到文本值-value存在时候取到value值"><a href="#似乎v-model-在-value不存在时候取到文本值-value存在时候取到value值" class="headerlink" title="似乎v-model 在 value不存在时候取到文本值 value存在时候取到value值"></a>似乎v-model 在 value不存在时候取到文本值 value存在时候取到value值</h2></li>
</ul>
<ol>
<li><p>input textarea  输入框</p>
<blockquote>
<p>在文本区域插值 <code>(&lt;textarea&gt;&#123;&#123;text&#125;&#125;&lt;/textarea&gt;) </code>并不会生效，应用 v-model 来代替。</p>
</blockquote>
<figure class="highlight handlebars"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    // 数据双向绑定 v-model 相当于监听？</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;msg1&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;编辑我&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>内容是: </span><span class="template-variable">&#123;&#123; <span class="name">msg1</span> &#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>多行编辑:<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">v-model</span>=<span class="string">&quot;msg2&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;5&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;添加多行内容&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    内容是:</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;white-space: pre-line;&quot;</span>&gt;</span></span><span class="template-variable">&#123;&#123; <span class="name">msg2</span> &#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">msg1</span>: <span class="string">&quot;&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">msg2</span>: <span class="string">&quot;&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li>
<li><p>复选框 checkbox</p>
<blockquote>
<p><em>单个复选框，绑定到布尔值。多个复选框，绑定到同一个数组.</em><br>v-model&#x3D;”checkedNames”   最终值&#x2F;最终结果：checkedNames即被监听的数据<br>hr前是单选项 hr后是多选项</p>
</blockquote>
<figure class="highlight handlebars"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;checked&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span></span><span class="template-variable">&#123;&#123; <span class="name">checked</span> &#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;loen&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Loen&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;checkedNames&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;loen&quot;</span>&gt;</span>Loen<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;nier&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Nier&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;checkedNames&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;nier&quot;</span>&gt;</span>Nier<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;kelly&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Kelly&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;checkedNames&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;kelly&quot;</span>&gt;</span>Kelly<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>选择了: </span><span class="template-variable">&#123;&#123; <span class="name">checkedNames</span> &#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">checked</span>: <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">checkedNames</span>: []</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;);</span></span></span><br></pre></td></tr></table></figure>
<p><img src="https://atts.w3cschool.cn/attachments/image/20191225/1577252490131697.png" alt="复选"></p>
</li>
<li><p>单选按钮和选择框 radio select</p>
<blockquote>
<p>如果 v-model 表达式的初始值未能匹配任何选项，<code>&lt;select&gt; </code>元素将被渲染为“未选中”状态。在 iOS 中，这会使用户无法选择第一个选项。因为这样的情况下，iOS 不会触发 change 事件。因此，更推荐像上面这样提供一个值为空的禁用选项。</p>
</blockquote>
<figure class="highlight handlebars"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">id</span>=<span class="string">&quot;one&quot;</span> <span class="attr">value</span>=<span class="string">&quot;One&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;picked&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;one&quot;</span>&gt;</span>一<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">id</span>=<span class="string">&quot;two&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Two&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;picked&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;two&quot;</span>&gt;</span>二<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>选择: </span><span class="template-variable">&#123;&#123; <span class="name">picked</span> &#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">&quot;selected&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">disabled</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>请选择<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>A<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>B<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>C<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>Selected: </span><span class="template-variable">&#123;&#123; <span class="name">selected</span> &#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">picked</span>: <span class="string">&#x27;&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">selected</span>: <span class="string">&#x27;&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;);</span></span></span><br></pre></td></tr></table></figure>
<h2 id="值绑定"><a href="#值绑定" class="headerlink" title="值绑定"></a>值绑定</h2><blockquote>
<p>v-model 绑定的值通常是<em></em>静态字符串 (对于复选框也可以是布尔值)：</p>
</blockquote>
<figure class="highlight handlebars"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">a:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;picked&quot;</span> <span class="attr">value</span>=<span class="string">&quot;a&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">b:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;picked&quot;</span> <span class="attr">value</span>=<span class="string">&quot;b&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><span class="template-variable">&#123;&#123; <span class="name">picked</span> &#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;toggle&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><span class="template-variable">&#123;&#123; <span class="name">toggle</span> &#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">&quot;selected&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;abc&quot;</span>&gt;</span>ABC<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;efg&quot;</span>&gt;</span>EFG<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><span class="template-variable">&#123;&#123; <span class="name">selected</span> &#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">picked</span>: <span class="string">&quot;&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">toggle</span>: <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">selected</span>: []</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p><img src="https://atts.w3cschool.cn/attachments/image/20191225/1577253997493707.png" alt="结果"></p>
</li>
</ol>
<h3 id="自定义值绑定"><a href="#自定义值绑定" class="headerlink" title="自定义值绑定"></a>自定义值绑定</h3><blockquote>
<p>v-bind:value&#x3D;”{}”</p>
</blockquote>
<figure class="highlight handlebars"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>复选框(自定义值)<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">//这里的 true-value 和 false-value 特性并不会影响输入控件的 value 特性，因为浏览器在提交表单时并不会包含未被选中的复选框。 勾选后html显示yes 取消勾选显示no</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;toggle&quot;</span> <span class="attr">true-value</span>=<span class="string">&quot;yes&quot;</span> <span class="attr">false-value</span>=<span class="string">&quot;no&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span><span class="template-variable">&#123;&#123; <span class="name">toggle</span> &#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;pick&quot;</span> <span class="attr">v-bind:value</span>=<span class="string">&quot;a&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span><span class="template-variable">&#123;&#123; <span class="name">pick</span> &#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">&quot;selected&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="comment">&lt;!-- 内联对象字面量 --&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">v-bind:value</span>=<span class="string">&quot;&#123; number: 123 &#125;&quot;</span>&gt;</span>123<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">v-bind:value</span>=<span class="string">&quot;&#123; number: 456 &#125;&quot;</span>&gt;</span>456<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span><span class="template-variable">&#123;&#123; <span class="name">selected.number</span> &#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">a</span>: <span class="string">&#x27;test&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">pick</span>: <span class="string">&quot;&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">toggle</span>: <span class="string">&quot;&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">selected</span>: []</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h2 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h2><ul>
<li>.lazy <blockquote>
<p>在默认情况下，v-model 在每次 input 事件触发后将输入框的值与数据进行同步 。你可以添加 lazy 修饰符，从而转变为使用 change 事件进行同步.</p>
</blockquote>
<figure class="highlight handlebars"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="comment">&lt;!-- 在“change”时而非“input”时更新 --&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.lazy</span>=<span class="string">&quot;msg&quot;</span> &gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>输入的数据是:</span><span class="template-variable">&#123;&#123;<span class="name">msg</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li>
<li>.number<blockquote>
<p>如果想自动将用户的输入值转为数值类型，可以给 v-model 添加 number 修饰符</p>
</blockquote>
</li>
<li>.trim<blockquote>
<p>如果要自动过滤用户输入的首尾空白字符，可以给 v-model 添加 trim 修饰符</p>
</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>Vue</category>
        <category>form</category>
      </categories>
      <tags>
        <tag>Vue 2.0</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue2.0使用手册</title>
    <url>/2022/04/08/vue/vue2.0/</url>
    <content><![CDATA[<p>vue2笔记</p>
<span id="more"></span>
<blockquote>
<p>与 Angular.js 和 React.js 相比，Vue. js 一直以轻量级，易上手被开发者称道。 易维护、插件丰富、轻量化、易上手</p>
</blockquote>
<h3 id="加载-vue-方式"><a href="#加载-vue-方式" class="headerlink" title="加载 vue 方式"></a>加载 vue 方式</h3><ol>
<li><p>引入</p>
<script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
</li>
<li><p>npm 安装 <code>npm install vue</code> 默认安装最新稳定版本</p>
</li>
</ol>
<h3 id="创建实例"><a href="#创建实例" class="headerlink" title="创建实例"></a>创建实例</h3><ol>
<li>Vue 函数创建一个新 Vue 实例<blockquote>
<p>可以在选项中传入（数据、模板、挂载元素、生命周期等）。</p>
</blockquote>
</li>
</ol>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line"><span class="built_in">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="comment">//选项</span></span><br><span class="line">  el: <span class="string">&#x27;#app&#x27;</span>, <span class="comment">// 绑定的元素</span></span><br><span class="line">  data: &#123;</span><br><span class="line">    message: <span class="string">&quot;hello w3cschool!&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<blockquote>
<p><em>Vue 实例被创建时候，data 对象中所有属性会加入 Vue 的响应式系统中</em>，当值变化时候 视图会产生”响应”,即匹配更新为新的值。<br>数据对象加入到 Vue 实例中后，通过 vue 实例设置属性值后原始数据值 会跟着改变 。反之也会 .当这些数据改变时，<em>视图会进行重渲染</em>。</p>
</blockquote>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line">//<span class="class"><span class="keyword">data</span>对象  在vue实例之前定义并加入<span class="keyword">data</span> 所以会被加入响应式系统</span></span><br><span class="line"><span class="title">var</span> <span class="class"><span class="keyword">data</span> = &#123; <span class="title">a</span>: 2 &#125;</span></span><br><span class="line"><span class="title">var</span> vm = new <span class="type">Vue</span>(&#123;</span><br><span class="line">  <span class="class"><span class="keyword">data</span>: <span class="keyword">data</span></span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="title">vm</span>.a = <span class="number">1</span></span><br><span class="line"><span class="class"><span class="keyword">data</span>.a // =&gt; 1</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">data</span>.a = 3</span></span><br><span class="line"><span class="title">vm</span>.a // =&gt; <span class="number">3</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>只有当实例被创建时就已经存在于 data 中的属性才是响应式的</p>
</blockquote>
<ul>
<li>即在 Vue 创建之前 定义的变量加入 data 后算相应。</li>
<li>在 Vue 创建之后定义的变量 即使加入 data 也不响应。<blockquote>
<p>在 data 外创建属性 对该属性进行改动 视图是不会重新渲染的。</p>
</blockquote>
</li>
</ul>
<blockquote>
<p>如果你需要一个属性，但是一开始它为空或不存在，那么你仅需要设置一些初始值。</p>
</blockquote>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">data:</span> &#123;</span><br><span class="line">  <span class="attr">newTodoText:</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="attr">visitCount:</span> <span class="number">0</span>,</span><br><span class="line">  <span class="attr">hideCompletedTodos:</span> <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">todos:</span> [],</span><br><span class="line">  <span class="attr">error:</span> <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><ol>
<li>在 Vue 中，我们可以通过属性 methods 来定义方法</li>
<li>v-on 指令用来监听 DOM 事件  <ul>
<li><code>v-on:dom事件=&quot;触发的函数/方法名&quot;</code></li>
<li>缩写 <code>&lt;a @click=&quot;doSomething&quot;&gt;...&lt;/a&gt;</code><blockquote>
<p>dom事件 如点击click &#x2F;  [ename] (动态参数<br>可以用来阻止原生提交<br><code>.prevent</code> 修饰符告诉 v-on 指令对于触发的事件调用 event.preventDefault()（阻止默认事件）。<br><code>.stop</code> 修饰符告诉 v-on 指令对于触发的事件调用 event.stopPropagation()（阻止冒泡）。  </p>
</blockquote>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">form</span> action=<span class="string">&quot;/login&quot;</span> v-<span class="keyword">on</span>:submit.prevent=<span class="string">&quot;onSubmit&quot;</span>&gt;</span><br><span class="line">	name: &lt;<span class="keyword">input</span> <span class="keyword">type</span>=<span class="string">&quot;text&quot;</span> value=<span class="string">&quot;&quot;</span> /&gt;&lt;<span class="keyword">br</span>&gt;</span><br><span class="line">	&lt;<span class="keyword">input</span> <span class="keyword">type</span>=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span> /&gt;</span><br><span class="line">&lt;/<span class="keyword">form</span>&gt;</span><br><span class="line">methods: &#123;</span><br><span class="line">  onSubmit: function()&#123;</span><br><span class="line">    alert(<span class="string">&quot;v-on:submit.prevent 通知 Web 浏览器不要执行与事件关联的默认动作并执行指定函数!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;hello&quot;</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>:&#123;<span class="attr">msg</span>:<span class="string">&#x27;Hello World!&#x27;</span>&#125;,</span><br><span class="line">    <span class="attr">methods</span>:&#123;</span><br><span class="line">        <span class="attr">hello</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">msg</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="attr">add</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">			      <span class="variable language_">this</span>.<span class="property">res</span>++;</span><br><span class="line">		    &#125;,</span><br><span class="line">        <span class="attr">sub</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">res</span>--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h2><h3 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h3><ol>
<li><p>使用“Mustache”语法 <code>&#123;&#123;&#125;&#125;</code>(双大括号) 的文本插值：</p>
</li>
<li><p><code>v-once</code> 指令 :能执行一次性地插值，当数据变化时候插值处的内容不会更新</p>
</li>
<li><p><code>v-html=&quot;key&quot; </code>: 双大括号会将数据解释为普通文本，而非 HTML 代码。为了输出真正的 HTML，需要使用 v-html 指令</p>
<ul>
<li>安全提醒: 不要在你的站点上动态渲染的任意 HTML ，因为很容易导致 XSS 攻击。只对可信内容使用 HTML 插值，绝不要对用户提供的内容使用插值。</li>
</ul>
</li>
<li><p><code>v-bind:参数 =&quot;&quot;</code> : 渲染动态数据（一直变化的那种？ ?????在看看别的教程   参数可以是id class title等html属性<br><code>&lt;div v-bind:id=&quot;key&quot;&gt;&lt;/div&gt;</code><br><code>&lt;div v-bind:class=&quot;dynamicClass&quot;&gt;&lt;/div&gt;</code></p>
<blockquote>
<p>缩写 <code>&lt;a :href=&quot;url&quot;&gt;...&lt;/a&gt;</code></p>
</blockquote>
</li>
</ol>
<figure class="highlight handlebars"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!-- 文本插值</span></span><span class="template-variable">&#123;&#123;&#125;&#125;</span><span class="language-xml"><span class="comment">   + v-once 只渲染一次--&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-once</span>&gt;</span>Message: </span><span class="template-variable">&#123;&#123; <span class="name">msg</span> &#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这里会输出text文本: </span><span class="template-variable">&#123;&#123; <span class="name">rawHtml</span> &#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">// 这个 span 的内容将会被替换成为属性值 rawHtml，直接作为 HTML 会忽略解析属性值中的数据绑定。</span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!-- v-html --&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这里使用了 v-html 指令会输出真正的HTML: <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-html</span>=<span class="string">&quot;rawHtml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!-- v-bind 渲染动态数据（？ --&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:id</span>=<span class="string">&quot;dynamicId&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">	<span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">	<span class="attr">data</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     <span class="attr">msg</span>: <span class="string">&quot;hello w3cschool&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     <span class="attr">rawHtml</span>: <span class="string">&#x27;&lt;span style=&quot;color:blue&quot;&gt;这里要显示蓝色&lt;/span&gt;&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     <span class="attr">dynamicId</span>: <span class="string">&quot;vbox&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     <span class="attr">dynamicClass</span>: <span class="string">&quot;loen wang&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">	&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">vm.<span class="property">msg</span> = <span class="string">&quot;hello nier&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">vm.<span class="property">dynamicId</span> = <span class="string">&quot;banner&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">vm.<span class="property">dynamicClass</span> = <span class="string">&quot;nier&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;, <span class="number">1000</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="Js-表达式"><a href="#Js-表达式" class="headerlink" title="Js 表达式"></a>Js 表达式</h3><blockquote>
<p>有个限制就是，每个绑定都只能包含单个表达式.</p>
</blockquote>
<ol>
<li>计算 <code>&#123;&#123; number +1 &#125;&#125;</code></li>
<li>三元 <code>&#123;&#123; ok ? 'YES' : 'NO' &#125;&#125;</code></li>
<li>单表达式运算 <code>&#123;&#123; message.split('').reverse().join('') &#125;&#125;</code></li>
<li>字符串拼接 <code>&lt;div v-bind:id=&quot;&#39;list-&#39; + id&quot;&gt;&lt;/div&gt; </code></li>
</ol>
<h4 id="用三元运算-根据不同状态改变-class"><a href="#用三元运算-根据不同状态改变-class" class="headerlink" title="用三元运算 根据不同状态改变 class"></a>用三元运算 根据不同状态改变 class</h4><blockquote>
<p>当状态为 success 的时候 class 为 on, 显示绿色字体否则显示红色字体 !!!!!</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.on</span> &#123;<span class="attribute">color</span>: green; &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.off</span> &#123;<span class="attribute">color</span>: red; &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-bind:class</span>=<span class="string">&quot;status == &#x27;success&#x27; ? &#x27;on&#x27;: &#x27;off&#x27;&quot;</span>&gt;</span>状态<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">	<span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">	<span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">	    <span class="attr">status</span>: <span class="string">&quot;fail&quot;</span></span></span><br><span class="line"><span class="language-javascript">	&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>eg.</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:id</span>=<span class="string">&quot;4*dynamicId&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">	<span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">	<span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">dynamicId</span>: <span class="string">&quot;8&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">	&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>以下两种不会生效</p>
</blockquote>
<figure class="highlight handlebars"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">&quot;var dynamicId=1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!-- 这是语句，不是表达式 --&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">&quot;</span></span></span><span class="template-variable">&#123;&#123; <span class="name"><span class="built_in">if</span></span> (<span class="name">dynamicId</span>) &#123; return dynamicId &#125; &#125;&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!-- 流控制也不会生效，请使用三元表达式 --&gt;</span></span></span><br></pre></td></tr></table></figure>

<h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><blockquote>
<p>指令 (Directives) 是带有 v- 前缀的特殊特性。指令特性的值预期是单个 JavaScript 表达式 (v-for 是例外)。<br>指令的职责是，当表达式的值改变时，将其产生的连带影响，响应式地作用于 DOM。</p>
</blockquote>
<ol>
<li>v-if 指令 根据表达式 seen 的值的真假来插入&#x2F;移除 <p> 元素。</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;seen&quot;</span>&gt;</span>现在你看到我了<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">	<span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">	<span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">seen</span>: <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">	&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">	vm.<span class="property">seen</span>=<span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">&#125;, <span class="number">2000</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>参数<blockquote>
<p>一些指令能接受一个参数 在指令名称后面用冒号表示。<br>如v-bind可用于响应式更新html特性：</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span>w3cschool<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">	<span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">	<span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">	    <span class="attr">url</span>: <span class="string">&#x27;https://m.w3cschool.cn&#x27;</span></span></span><br><span class="line"><span class="language-javascript">	&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="动态参数"><a href="#动态参数" class="headerlink" title="动态参数  ???"></a>动态参数  ???</h4><blockquote>
<p>从 Vue 2.6.0 开始，可以用方括号括起来的 JavaScript 表达式作为一个指令的参数.<br><code>&lt;a v-bind:[attributeName]=&quot;url&quot;&gt; </code><br>这里的 attributeName 会被作为一个 JavaScript 表达式进行动态求值，求得的值将会作为最终的参数来使用。<br>例如，如果你的 Vue 实例有一个 data 属性 attributeName，其值为 “href”，那么这个绑定将等价于 v-bind:href。</p>
</blockquote>
</li>
</ol>
<ul>
<li>使用动态参数为一个动态的事件名绑定处理函数 ???<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-on:</span>[<span class="attr">ename</span>]=<span class="string">&quot;doSomething&quot;</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;changeEventName&quot;</span>&gt;</span>修改ename<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"> <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">   <span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">   <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">       <span class="attr">ename</span>: <span class="string">&#x27;click&#x27;</span></span></span><br><span class="line"><span class="language-javascript">   &#125;,</span></span><br><span class="line"><span class="language-javascript">   <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">     <span class="attr">doSomething</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">         <span class="title function_">alert</span>(<span class="string">&quot;触发了&quot;</span>+<span class="variable language_">this</span>.<span class="property">ename</span>+<span class="string">&quot;事件&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">     &#125;,</span></span><br><span class="line"><span class="language-javascript">     <span class="attr">changeEventName</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">         <span class="variable language_">this</span>.<span class="property">ename</span> = <span class="string">&#x27;blur&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">     &#125;</span></span><br><span class="line"><span class="language-javascript">   &#125;</span></span><br><span class="line"><span class="language-javascript"> &#125;);</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>对动态参数的值的约束<br>动态参数预期会求出一个字符串，异常情况下值为 null。这个特殊的 null 值可以被显性地用于移除绑定。任何其它非字符串类型的值都将会触发一个警告。</p>
</blockquote>
</li>
<li>某些字符，如空格和引号，放在 HTML 属性名里是无效的。</li>
<li><code>&lt;!-- 这会触发一个编译警告 --&gt;&lt;a v-bind:[&#39;foo &#39; + bar]=&quot;value&quot;&gt; ... &lt;/a&gt;</code></li>
<li>变通的办法是使用没有空格或引号的表达式，或用计算属性替代这种复杂表达式。</li>
<li>在 DOM 中使用模板时 (直接在一个 HTML 文件里撰写模板)，还需要避免使用大写字符来命名键名，因为浏览器会把 attribute 名全部强制转为小写。</li>
<li><code>&lt;input type=&quot;text&quot; v-on:[eName]=&quot;doSomething&quot; /&gt;</code><h3 id="实例生命周期钩子"><a href="#实例生命周期钩子" class="headerlink" title="实例生命周期钩子"></a>实例生命周期钩子</h3></li>
</ul>
<h2 id="created-：在实例被创建之后执行代码"><a href="#created-：在实例被创建之后执行代码" class="headerlink" title="created ：在实例被创建之后执行代码"></a>created ：在实例被创建之后执行代码</h2><figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="number">1</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">created</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// `this` 指向 vm 实例</span></span><br><span class="line">    <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&#x27;a is: &#x27;</span> + this.a)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>生命周期钩子的 this 上下文指向调用它的 Vue 实例.</p>
</blockquote>
<h2 id="周期函数的作用"><a href="#周期函数的作用" class="headerlink" title="周期函数的作用"></a>周期函数的作用</h2><ol>
<li>beforeCreate ：在实例开始初始化时同步调用。此时数据观测、事件等都尚未初始化。</li>
<li>created：在实例创建之后调用。此时已完成数据观测、事件方法，但尚未开始 DOM 编译，即未挂载到 document 中。</li>
<li>beforeMount：在 mounted 之前运行。[2.0 中的新钩子]</li>
<li>mounted：在编译结束时调用。此时所有指令已生效，数据变化已能触发 DOM 更新，但不保证$el 已插入文档。</li>
<li>beforeUpdate: 在实例挂载之后，再次更新实例（例如更新 data）时会调用该方法，此时尚未更新 DOM 结构。[2.0 中的新钩子]</li>
<li>updated: 在实例挂载之后，再次更新实例并更新完 DOM 结构后调用。[2.0 中的新钩子]</li>
<li>beforeDestroy :在开始销毁实例时调用，此刻实例仍然有效。</li>
<li>destroyed:在实例被销毁之后调用。此时所有绑定和实例指令都已经解绑，子实例也被销毁。</li>
</ol>
<blockquote>
<p>keep-live 缓存</p>
</blockquote>
<ol start="9">
<li>activated：需要配合动态组件 keep-live 属性使用。在动态组件初始化渲染的过程中调用该方法。[2.0 中的新钩子]</li>
<li>deactivated：需要配合动态组件 keep-live 属性使用。在动态组件移出的过程中调用该方法。[2.0 中的新钩子]</li>
</ol>
<h1 id="生命周期钩子图示"><a href="#生命周期钩子图示" class="headerlink" title="生命周期钩子图示"></a>生命周期钩子图示</h1><p><img src="https://atts.w3cschool.cn/attachments/image/20191223/1577093844209992.png"></p>
<h3 id="一个简单的例子-Eg。"><a href="#一个简单的例子-Eg。" class="headerlink" title="一个简单的例子 Eg。"></a>一个简单的例子 Eg。</h3><figure class="highlight handlebars"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">message</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      el : <span class="string">&#x27;#app&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          message : <span class="string">&#x27;welcome to W3CSchool&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue 2.0</tag>
      </tags>
  </entry>
  <entry>
    <title>Es6新增记录</title>
    <url>/2023/02/27/JavaScript/es6/</url>
    <content><![CDATA[<p>ES6新增部分笔记，持续更新ing</p>
<span id="more"></span>

<h2 id="对数组的扩展"><a href="#对数组的扩展" class="headerlink" title="对数组的扩展"></a><b id="arr0"></b>对数组的扩展</h2><ol>
<li><p>扩展运算符是三个点（<b id="arr1"></b><code>...</code>）。</p>
<blockquote>
<p>将一个数组转为用逗号分隔的参数序列([1]–&gt;1),主要用于函数调用。</p>
</blockquote>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 该运算符将一个数组，变为参数序列。</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">push</span><span class="params">(array, <span class="rest_arg">...items</span>)</span> &#123;</span><br><span class="line">   array.push(...items);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span><span class="params">(x, y)</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> numbers = [<span class="number">4</span>, <span class="number">38</span>];</span><br><span class="line">add(...numbers) <span class="comment">// 42</span></span><br></pre></td></tr></table></figure>
<p><span style="color:red">只有函数调用时，扩展运算符才可以放在圆括号中，否则会报错。</span></p>
<blockquote>
<p>对对象应用，解构赋值。 </p>
</blockquote>
<ul>
<li>注：扩展运算符形式的解构赋值必须是最后一个参数<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">let</span> &#123;x,y, ...z&#125;=&#123;x:<span class="number">1</span>,y:<span class="number">2</span>,a:<span class="number">3</span>,b:<span class="number">4</span>&#125;</span><br><span class="line"><span class="attribute">x</span> //<span class="number">1</span></span><br><span class="line"><span class="attribute">y</span> //<span class="number">2</span></span><br><span class="line"><span class="attribute">z</span> //&#123;a:<span class="number">3</span>,b:<span class="number">4</span>&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><code>Array.of()</code>将<b id="arr2">一组值</b>转成数组 </p>
<ul>
<li>没有参数时候，返回一个空数组。</li>
<li>参数只有一个正整数时，实际上是指定数组的长度。</li>
<li>参数不少于2个时，Array()才返回参数组成的新数组。<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>()  <span class="comment">//[]</span></span><br><span class="line"><span class="built_in">Array</span>(<span class="number">3</span>) <span class="comment">//[,,,]</span></span><br><span class="line"><span class="built_in">Array</span>(<span class="number">3</span>,<span class="number">11</span>,<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//es5</span></span><br><span class="line">function <span class="built_in">ArrayOf</span>()&#123;</span><br><span class="line">   return <span class="selector-attr">[]</span><span class="selector-class">.slice</span><span class="selector-class">.call</span>(arguments);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>可以接收第二个参数，用于对每个元素进行处理，将处理后的值放回数组</p>
</blockquote>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.<span class="keyword">from</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],<span class="function"><span class="params">(X)</span>=&gt;</span>X*X)  <span class="regexp">//</span> [<span class="number">1</span>,<span class="number">4</span>,<span class="number">9</span>]</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><code>Array.from()</code>将<b>类数组对象和可遍历对象</b>转成数组 </p>
<ul>
<li>Array.from()方法用于将两类对象转为真正的数组：类似数组的对象（array-like object）和可遍历（iterable）的对象（包括 ES6 新增的数据结构 Set 和 Map）。</li>
<li>常见的类似数组的对象是 DOM 操作返回的 NodeList 集合，以及函数内部的arguments对象。</li>
<li>任何有length属性的对象，都可以通过Array.from()方法转为数组。<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">//</span>字符串转数组，可以用来计算字符串的长度。因为它能正确处理各种 Unicode 字符，可以避免 JavaScript 将大于\uFFFF的 Unicode 字符，算作两个字符的 bug。</span><br><span class="line">Array.from(<span class="string">&#x27;hello&#x27;</span>).length   <span class="regexp">//</span>转成数组时是[<span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;o&#x27;</span>] <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span>类数组对象</span><br><span class="line">let arrayLike = &#123;</span><br><span class="line">   <span class="string">&#x27;0&#x27;</span>: <span class="string">&#x27;a&#x27;</span>,</span><br><span class="line">   <span class="string">&#x27;1&#x27;</span>: <span class="string">&#x27;b&#x27;</span>,</span><br><span class="line">   <span class="string">&#x27;2&#x27;</span>: <span class="string">&#x27;c&#x27;</span>,</span><br><span class="line">   length: <span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="regexp">//</span> ES5 的写法</span><br><span class="line">var arr1 = [].slice.call(arrayLike); <span class="regexp">//</span> [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"><span class="regexp">//</span> ES6 的写法</span><br><span class="line">let arr2 = Array.from(arrayLike); <span class="regexp">//</span> [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> NodeList 对象</span><br><span class="line">let ps = document.querySelectorAll(<span class="string">&#x27;p&#x27;</span>);</span><br><span class="line">Array.from(ps).filter(p =&gt; &#123;</span><br><span class="line">   return p.textContent.length &gt; <span class="number">100</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> arguments 对象</span><br><span class="line"><span class="keyword">function</span> foo() &#123;</span><br><span class="line">   var args = Array.from(arguments);</span><br><span class="line"><span class="regexp">//</span> ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>可以接收第二个参数，用于对每个元素进行处理，将处理后的值放回数组类map</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="title function_">from</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],<span class="function">(<span class="params">X</span>)=&gt;</span>X*X)  <span class="comment">// [1,4,9]</span></span><br><span class="line">---------</span><br><span class="line"><span class="comment">// map()</span></span><br><span class="line"><span class="keyword">let</span> spans = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;span.name&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> names1 = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">map</span>.<span class="title function_">call</span>(spans, <span class="function"><span class="params">s</span> =&gt;</span> s.<span class="property">textContent</span>);</span><br><span class="line">----------</span><br><span class="line"><span class="comment">// Array.from()</span></span><br><span class="line"><span class="keyword">let</span> names2 = <span class="title class_">Array</span>.<span class="title function_">from</span>(spans, <span class="function"><span class="params">s</span> =&gt;</span> s.<span class="property">textContent</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
<ul>
<li>将数组中布尔值为false的成员转为0。</li>
<li><code>Array.from([1, , 2, , 3], (n) =&gt; n || 0) // [1, 0, 2, 0, 3]</code><blockquote>
<p>对于还没有部署该方法的浏览器，可以用<code>Array.prototype.slice()</code>方法替代。</p>
</blockquote>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">const toArray = <span class="function">(<span class="params">(</span>) =&gt;</span></span><br><span class="line">   <span class="built_in">Array</span>.from ? <span class="built_in">Array</span>.from : <span class="function"><span class="params">obj</span> =&gt;</span> [].<span class="built_in">slice</span>.call(obj)</span><br><span class="line">)();</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><b id="arr3">查找符合条件的成员</b>：<code>find()</code>，<code>findIndex()</code>，<code>findLast()</code>，<code>findLastIndex()</code> </p>
<h2 id="find-function-value-index-arr-用于找出第一个符合条件的数组成员。"><a href="#find-function-value-index-arr-用于找出第一个符合条件的数组成员。" class="headerlink" title="find(function(value,index,arr){}) 用于找出第一个符合条件的数组成员。"></a><code>find(function(value,index,arr)&#123;&#125;)</code> 用于找出第一个符合条件的数组成员。</h2><blockquote>
<p>它的参数是一个回调函数，所有数组成员依次执行该回调函数，直到<b>找出</b>第一个返回值为true的成员，然后<B>返回该成员</B>。如果<b>没有</b>符合条件的成员，则<b>返回undefined</b>。<br>回调函数的三个参数依次为当前的值、当前的位置和原数组。</p>
</blockquote>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>].<span class="built_in">find</span>(<span class="keyword">function</span>(<span class="params">value, index, arr</span>) &#123;</span><br><span class="line">   <span class="keyword">return</span> value &gt; <span class="number">9</span>;</span><br><span class="line">&#125;) <span class="comment">// 10</span></span><br></pre></td></tr></table></figure>

<h2 id="findIndex-function-value-index-arr"><a href="#findIndex-function-value-index-arr" class="headerlink" title="findIndex(function(value,index,arr){})"></a><code>findIndex(function(value,index,arr)&#123;&#125;)</code></h2><blockquote>
<p>类似find(),找到则返回下标，没找到则返回-1</p>
</blockquote>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function">function <span class="title">f</span>(<span class="params">v</span>)</span>&#123;</span><br><span class="line">   <span class="keyword">return</span> v &gt; <span class="keyword">this</span>.age;   </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> person = &#123;name: <span class="string">&#x27;John&#x27;</span>, age: <span class="number">20</span>&#125;;</span><br><span class="line"><span class="comment">//回调函数f中的this对象指向第二个参数：person对象。</span></span><br><span class="line">[<span class="meta">10, 12, 26, 15</span>].find(f, person);    <span class="comment">// 26 </span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>find()</code>和<code>findIndex()</code>都可以接收第二个参数用来绑定回调函数的this对象。</p>
</blockquote>
<blockquote>
<p>这两个方法都可以发现NaN，弥补了数组的indexOf()方法的不足。</p>
</blockquote>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">[<span class="literal">NaN</span>].<span class="built_in">indexOf</span>(<span class="literal">NaN</span>) <span class="comment">// -1</span></span><br><span class="line">[<span class="literal">NaN</span>].findIndex(<span class="function"><span class="params">y</span> =&gt;</span> Object.is(<span class="literal">NaN</span>, y)) <span class="comment">// 0</span></span><br></pre></td></tr></table></figure>
<h2 id="findLast-和findLastIndex-，从数组的最后一个成员开始，依次向前检查，其他与前两保持不变。"><a href="#findLast-和findLastIndex-，从数组的最后一个成员开始，依次向前检查，其他与前两保持不变。" class="headerlink" title="findLast()和findLastIndex()，从数组的最后一个成员开始，依次向前检查，其他与前两保持不变。"></a><code>findLast()</code>和<code>findLastIndex()</code>，从数组的最后一个成员开始，依次向前检查，其他与前两保持不变。</h2></li>
<li><p>替换 <code>Array.prototype.copyWithin(target, start = 0, end = this.length)</code></p>
<ul>
<li>三个参数 target(必须)：从该位置开始替换数据。如果为负值，表示倒数。</li>
<li>start（可选）：从该位置开始读取数据，默认为 0。如果为负值，表示从末尾开始计算。</li>
<li>end（可选）：到该位置前停止读取数据，默认等于数组长度。如果为负值，表示从末尾开始计算。<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="selector-attr">[1, 2, 3, 4, 5]</span><span class="selector-class">.copyWithin</span>(<span class="number">0</span>, <span class="number">3</span>)<span class="comment">// [4, 5, 3, 4, 5]</span></span><br><span class="line"><span class="comment">//将从 3 号位直到数组结束的成员（4 和 5），复制到从 0 号位开始的位置，结果覆盖了原来的 1 和 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将3号位复制到0号位</span></span><br><span class="line"><span class="selector-attr">[]</span><span class="selector-class">.copyWithin</span><span class="selector-class">.call</span>(&#123;length: <span class="number">5</span>, <span class="number">3</span>: <span class="number">1</span>&#125;, <span class="number">0</span>, <span class="number">3</span>)</span><br><span class="line"><span class="comment">// &#123;0: 1, 3: 1, length: 5&#125;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<div style="width:100px;height:200px;border:1px solid;position:fixed;right:0;top:50px">
   <a href="#arr0">对数组的扩展</a>
   <a href="#arr1">扩展运算符</a>
   <a href="#arr2">转成数组Array.from、Array.of</a>
</div>]]></content>
      <categories>
        <category>JavaScript</category>
        <category>es6</category>
      </categories>
      <tags>
        <tag>JS</tag>
        <tag>es6</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown使用手册</title>
    <url>/2022/03/27/blog/Markdown%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/</url>
    <content><![CDATA[<p>Markdown一些使用记录。</p>
<span id="more"></span>
<h2 id="1-标题"><a href="#1-标题" class="headerlink" title="1.标题"></a>1.标题</h2><pre><code>使用#标记
#一级标题
##二级标题
一共1-6
</code></pre>
<h2 id="2-段落"><a href="#2-段落" class="headerlink" title="2.段落"></a>2.段落</h2><pre><code>1.末尾添加两个或以上空格加上回车
2.用空行如:
    段落1

    段落2
</code></pre>
<h2 id="3-字体"><a href="#3-字体" class="headerlink" title="3.字体"></a>3.字体</h2><pre><code>*斜体文本*
_斜体文本_
**粗体文本**
__粗体文本__
***粗斜体文本***
___粗斜体文本___
</code></pre>
<h2 id="4-分割线-删除线-下划线"><a href="#4-分割线-删除线-下划线" class="headerlink" title="4.分割线\删除线\下划线"></a>4.分割线\删除线\下划线</h2><blockquote>
<p>在一行中用三个以上的星号、减号、底线来建立一个分隔线，也可以在星号或是减号中间插入空格。</p>
</blockquote>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="section">***</span></span><br><span class="line"><span class="section">---</span></span><br><span class="line"><span class="emphasis">___</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>* *</span><br><span class="line"><span class="bullet">- </span>- -</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在文字两端<del>即可建立删除线<br>&#96;</del>r18<del>&#96; example: ~~r18</del> &gt;<code>&lt;u&gt;&lt;/u&gt;</code>建立下划线</p>
</blockquote>
<p><u>一条下划线</u></p>
<h2 id="5-列表"><a href="#5-列表" class="headerlink" title="5.列表"></a>5.列表</h2><blockquote>
<p>无序列表的标记 <code>* + -</code> 实心圆 空心圆方块</p>
</blockquote>
<blockquote>
<p>嵌套 :只需在子列表中的选项前面添加 tab</p>
</blockquote>
<ol start="2">
<li><p>第二项</p>
<ul>
<li>01</li>
</ul>
</li>
</ol>
<h2 id="6-区块"><a href="#6-区块" class="headerlink" title="6.区块"></a>6.区块</h2><ol>
<li><p><code>&gt; </code> 注意空格</p>
<ul>
<li>可以嵌套的<code>&gt;最外层 &gt;&gt;第一层 &gt;&gt;&gt;第二层</code></li>
</ul>
</li>
<li><p>区块中使用列表</p>
</li>
</ol>
<figure class="highlight node-repl"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span> <span class="language-javascript">区块中使用列表</span></span><br><span class="line"><span class="meta prompt_">&gt;</span> <span class="language-javascript"><span class="number">1.</span> 第一项</span></span><br><span class="line"><span class="meta prompt_">&gt;</span> <span class="language-javascript"><span class="number">2.</span> 第二项</span></span><br><span class="line"><span class="meta prompt_">&gt;</span> <span class="language-javascript">+ 第一项</span></span><br><span class="line"><span class="meta prompt_">&gt;</span> <span class="language-javascript">+ 第二项</span></span><br><span class="line"><span class="meta prompt_">&gt;</span> <span class="language-javascript">+ 第三项</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>区块中使用列表</p>
<ol>
<li>第一项</li>
<li>第二项</li>
</ol>
<ul>
<li>第一项</li>
<li>第二项</li>
</ul>
</blockquote>
<blockquote>
<p>列表中使用区块:在 &gt;前加一个 tab</p>
</blockquote>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span> 01</span><br><span class="line"><span class="code">    &gt;区块1</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    &gt;区块2</span></span><br></pre></td></tr></table></figure>

<ol>
<li><p>01</p>
<blockquote>
<p>区块 1</p>
</blockquote>
<blockquote>
<p>区块 2</p>
</blockquote>
</li>
</ol>
<h2 id="7-代码块"><a href="#7-代码块" class="headerlink" title="7. 代码块"></a>7. 代码块</h2><blockquote>
<p>单行代码 &#96;&#96;</p>
</blockquote>
<blockquote>
<p>多行代码 用 &#96;&#96;&#96;包裹</p>
</blockquote>
]]></content>
      <categories>
        <category>Others</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo使用手册</title>
    <url>/2022/03/26/blog/Hexo%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/</url>
    <content><![CDATA[<p>Hexo一些使用记录</p>
<span id="more"></span>

<h2 id="1-更新样式"><a href="#1-更新样式" class="headerlink" title="1.更新样式"></a>1.更新样式</h2><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">hexo</span> clean <span class="comment">#清除缓存</span></span><br><span class="line">hexo g     <span class="comment">#hexo generate 生成</span></span><br><span class="line">hexo d     <span class="comment">#hexo deploy 部署 (部署到github github样式更新会有延迟)</span></span><br><span class="line">hexo s     <span class="comment">#hexo server 运行服务器</span></span><br></pre></td></tr></table></figure>

<h2 id="2-更新文章"><a href="#2-更新文章" class="headerlink" title="2.更新文章"></a>2.更新文章</h2><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment">#运行服务器时候直接刷新就可显示最新的内容</span></span><br><span class="line"><span class="attribute">hexo</span> g</span><br><span class="line">hexo d</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<h2 id="3-添加新菜单并实现新菜单的文章归类"><a href="#3-添加新菜单并实现新菜单的文章归类" class="headerlink" title="3.添加新菜单并实现新菜单的文章归类"></a>3.添加新菜单并实现新菜单的文章归类</h2><blockquote>
<p><code>hexo new page favorite</code> #在根目录 sources 文件夹下生成 favorite 文件夹<br>在生成的 favorite 文件夹中修改:</p>
</blockquote>
<figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line"><span class="symbol">title:</span> 收藏夹</span><br><span class="line"><span class="symbol">type:</span> <span class="string">&quot;favorite&quot;</span></span><br><span class="line"><span class="symbol">comments:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>在主题&#x2F;languages&#x2F;zh-CN.yml 在 menu 里设置:</p>
</blockquote>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">menu:</span></span><br><span class="line"><span class="symbol">favorite:</span> 收藏夹</span><br></pre></td></tr></table></figure>

<h2 id="4-本地搜索功能"><a href="#4-本地搜索功能" class="headerlink" title="4.本地搜索功能"></a>4.本地搜索功能</h2><blockquote>
<p>在根目录下的_config.yml里追加内容:</p>
</blockquote>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="meta"># search</span></span><br><span class="line"><span class="symbol">search:</span></span><br><span class="line"><span class="symbol">  path:</span> search.xml</span><br><span class="line"><span class="symbol">  field:</span> post</span><br><span class="line"><span class="symbol">  format:</span> html</span><br><span class="line"><span class="symbol">  limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>在themes文件夹里的_config.yml里修改 local_search:</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">local_search:</span><br><span class="line">  enable: <span class="literal">true</span></span><br><span class="line">  # if auto, <span class="keyword">trigger</span> <span class="keyword">search</span> <span class="keyword">by</span> changing input</span><br><span class="line">  # if manual, <span class="keyword">trigger</span> <span class="keyword">search</span> <span class="keyword">by</span> pressing enter key <span class="keyword">or</span> <span class="keyword">search</span> button</span><br><span class="line">  <span class="keyword">trigger</span>: auto </span><br><span class="line">  # <span class="keyword">show</span> top n results <span class="keyword">per</span> article, <span class="keyword">show</span> <span class="keyword">all</span> results <span class="keyword">by</span> setting <span class="keyword">to</span> <span class="number">-1</span></span><br><span class="line">  top_n_per_article: <span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>安装搜索插件  npm install hexo-generator-searchdb –save</p>
</blockquote>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>NexT优化</title>
    <url>/2022/03/28/blog/NexT%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<p>NexT优化记录</p>
<span id="more"></span>

<blockquote>
<p>摘录了鼠标点击、live-2d、网易云播放器</p>
</blockquote>
<!--more-->

<h2 id="1-鼠标点击特效"><a href="#1-鼠标点击特效" class="headerlink" title="1.鼠标点击特效"></a>1.鼠标点击特效</h2><blockquote>
<p>在&#x2F;themes&#x2F;next&#x2F;source&#x2F;js&#x2F;src 下新建文件 clicklove.js</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">!<span class="keyword">function</span>(<span class="params">e,t,a</span>)&#123;<span class="keyword">function</span> <span class="title function_">n</span>(<span class="params"></span>)&#123;<span class="title function_">c</span>(<span class="string">&quot;.heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: &#x27;&#x27;;width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;&quot;</span>),<span class="title function_">o</span>(),<span class="title function_">r</span>()&#125;<span class="keyword">function</span> <span class="title function_">r</span>(<span class="params"></span>)&#123;<span class="keyword">for</span>(<span class="keyword">var</span> e=<span class="number">0</span>;e&lt;d.<span class="property">length</span>;e++)d[e].<span class="property">alpha</span>&lt;=<span class="number">0</span>?(t.<span class="property">body</span>.<span class="title function_">removeChild</span>(d[e].<span class="property">el</span>),d.<span class="title function_">splice</span>(e,<span class="number">1</span>)):(d[e].<span class="property">y</span>--,d[e].<span class="property">scale</span>+=<span class="number">.004</span>,d[e].<span class="property">alpha</span>-=<span class="number">.013</span>,d[e].<span class="property">el</span>.<span class="property">style</span>.<span class="property">cssText</span>=<span class="string">&quot;left:&quot;</span>+d[e].<span class="property">x</span>+<span class="string">&quot;px;top:&quot;</span>+d[e].<span class="property">y</span>+<span class="string">&quot;px;opacity:&quot;</span>+d[e].<span class="property">alpha</span>+<span class="string">&quot;;transform:scale(&quot;</span>+d[e].<span class="property">scale</span>+<span class="string">&quot;,&quot;</span>+d[e].<span class="property">scale</span>+<span class="string">&quot;) rotate(45deg);background:&quot;</span>+d[e].<span class="property">color</span>+<span class="string">&quot;;z-index:99999&quot;</span>);<span class="title function_">requestAnimationFrame</span>(r)&#125;<span class="keyword">function</span> <span class="title function_">o</span>(<span class="params"></span>)&#123;<span class="keyword">var</span> t=<span class="string">&quot;function&quot;</span>==<span class="keyword">typeof</span> e.<span class="property">onclick</span>&amp;&amp;e.<span class="property">onclick</span>;e.<span class="property">onclick</span>=<span class="keyword">function</span>(<span class="params">e</span>)&#123;t&amp;&amp;<span class="title function_">t</span>(),<span class="title function_">i</span>(e)&#125;&#125;<span class="keyword">function</span> <span class="title function_">i</span>(<span class="params">e</span>)&#123;<span class="keyword">var</span> a=t.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>);a.<span class="property">className</span>=<span class="string">&quot;heart&quot;</span>,d.<span class="title function_">push</span>(&#123;<span class="attr">el</span>:a,<span class="attr">x</span>:e.<span class="property">clientX</span>-<span class="number">5</span>,<span class="attr">y</span>:e.<span class="property">clientY</span>-<span class="number">5</span>,<span class="attr">scale</span>:<span class="number">1</span>,<span class="attr">alpha</span>:<span class="number">1</span>,<span class="attr">color</span>:<span class="title function_">s</span>()&#125;),t.<span class="property">body</span>.<span class="title function_">appendChild</span>(a)&#125;<span class="keyword">function</span> <span class="title function_">c</span>(<span class="params">e</span>)&#123;<span class="keyword">var</span> a=t.<span class="title function_">createElement</span>(<span class="string">&quot;style&quot;</span>);a.<span class="property">type</span>=<span class="string">&quot;text/css&quot;</span>;<span class="keyword">try</span>&#123;a.<span class="title function_">appendChild</span>(t.<span class="title function_">createTextNode</span>(e))&#125;<span class="keyword">catch</span>(t)&#123;a.<span class="property">styleSheet</span>.<span class="property">cssText</span>=e&#125;t.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;head&quot;</span>)[<span class="number">0</span>].<span class="title function_">appendChild</span>(a)&#125;<span class="keyword">function</span> <span class="title function_">s</span>(<span class="params"></span>)&#123;<span class="keyword">return</span><span class="string">&quot;rgb(&quot;</span>+~~(<span class="number">255</span>*<span class="title class_">Math</span>.<span class="title function_">random</span>())+<span class="string">&quot;,&quot;</span>+~~(<span class="number">255</span>*<span class="title class_">Math</span>.<span class="title function_">random</span>())+<span class="string">&quot;,&quot;</span>+~~(<span class="number">255</span>*<span class="title class_">Math</span>.<span class="title function_">random</span>())+<span class="string">&quot;)&quot;</span>&#125;<span class="keyword">var</span> d=[];e.<span class="property">requestAnimationFrame</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="keyword">return</span> e.<span class="property">requestAnimationFrame</span>||e.<span class="property">webkitRequestAnimationFrame</span>||e.<span class="property">mozRequestAnimationFrame</span>||e.<span class="property">oRequestAnimationFrame</span>||e.<span class="property">msRequestAnimationFrame</span>||<span class="keyword">function</span>(<span class="params">e</span>)&#123;<span class="built_in">setTimeout</span>(e,<span class="number">1e3</span>/<span class="number">60</span>)&#125;&#125;(),<span class="title function_">n</span>()&#125;(<span class="variable language_">window</span>,<span class="variable language_">document</span>);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在\themes\next\layout_layout.swig 文件末尾添加</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 页面点击小红心 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/js/src/clicklove.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-添加页面宠物"><a href="#2-添加页面宠物" class="headerlink" title="2.添加页面宠物"></a>2.添加页面宠物</h2><blockquote>
<p>在博客目录执行<br><code>npm install -save hexo-helper-live2d</code></p>
</blockquote>
<blockquote>
<p>在站点配置文件中加入</p>
</blockquote>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">live2d:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">scriptFrom:</span> <span class="string">local</span></span><br><span class="line">  <span class="attr">pluginRootPath:</span> <span class="string">live2dw/</span></span><br><span class="line">  <span class="attr">pluginJsPath:</span> <span class="string">lib/</span></span><br><span class="line">  <span class="attr">pluginModelPath:</span> <span class="string">assets/</span></span><br><span class="line">  <span class="attr">tagMode:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">model:</span></span><br><span class="line">    <span class="attr">use:</span> <span class="string">live2d-widget-model-wanko</span>  <span class="comment">#选择哪种模型</span></span><br><span class="line">  <span class="attr">display:</span> <span class="comment">#放置位置和大小</span></span><br><span class="line">    <span class="attr">position:</span> <span class="string">right</span></span><br><span class="line">    <span class="attr">width:</span> <span class="number">150</span></span><br><span class="line">    <span class="attr">height:</span> <span class="number">300</span></span><br><span class="line">  <span class="attr">mobile:</span></span><br><span class="line">    <span class="attr">show:</span> <span class="literal">false</span> <span class="comment">#是否在手机端显示</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>下载 live2d 模型<br><code>npm install live2d-widget-model-wanko </code></p>
</blockquote>
<h2 id="3-加入网易云音乐播放器"><a href="#3-加入网易云音乐播放器" class="headerlink" title="3.加入网易云音乐播放器"></a>3.加入网易云音乐播放器</h2><blockquote>
<p>首先在网页搜索网易云音乐，选择音乐，并生成外链,得到外链代码<br>放在侧边栏，在 Blog&#x2F;themes&#x2F;next&#x2F;layout&#x2F;_macro&#x2F;sidebar.swig 文件下，选择位置粘贴代码</p>
</blockquote>
]]></content>
      <categories>
        <category>Hexo</category>
        <category>NexT</category>
      </categories>
      <tags>
        <tag>NexT</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2022/03/25/blog/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>用Hexo搭建博客</title>
    <url>/2022/03/25/blog/%E6%90%AD%E5%BB%BAhexo/</url>
    <content><![CDATA[<p>搭建记录 （暂弃坑，有空再补</p>
<span id="more"></span>
<h2 id="记录些搭建-Hexo-过程"><a href="#记录些搭建-Hexo-过程" class="headerlink" title="记录些搭建 Hexo 过程"></a>记录些搭建 Hexo 过程</h2><p>2022&#x2F;3&#x2F;25<br>花了 2 天才装好 hexo 被 npm 卡住了</p>
]]></content>
      <categories>
        <category>Hexo</category>
        <category>Blog-build</category>
      </categories>
      <tags>
        <tag>introduction</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>JQ使用手册</title>
    <url>/2022/04/01/JavaScript/JQ%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/</url>
    <content><![CDATA[<p>jq常用事件方法记录，持续ing</p>
<span id="more"></span>
<h2 id="1-ready事件"><a href="#1-ready事件" class="headerlink" title="1.ready事件"></a>1.ready事件</h2><blockquote>
<p>当浏览器 DOM（文档对象模型） 已经加载，并且页面（包括图像）已经完全呈现时，会发生 ready 事件。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"> <span class="comment">// 在文档加载后执行的代码</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="2-jQuery-语法-amp-方法"><a href="#2-jQuery-语法-amp-方法" class="headerlink" title="2.jQuery 语法&amp;方法"></a>2.jQuery 语法&amp;方法</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><blockquote>
<p><code>$(selector).action(); </code> &#x2F;&#x2F;(selector)选择符用于查询&#x2F;查找Html元素</p>
</blockquote>
<h3 id="一些常用方法"><a href="#一些常用方法" class="headerlink" title="一些常用方法"></a>一些常用方法</h3><ol>
<li><p><code>$(document).ready(function()&#123;&#125;)</code> dom加载好后执行代码</p>
<blockquote>
<p>防止文档在完全加载（就绪）之前运行 jQuery 代码，即在 DOM 加载完成后才可以对 DOM 进行操作。</p>
</blockquote>
</li>
<li><p>hide() &#x2F; show() 隐藏&#x2F;显示元素</p>
<blockquote>
<p><code>$(&quot;#test&quot;).hide();</code><br><code>$(&quot;#test&quot;).show();</code></p>
</blockquote>
</li>
<li><p>addClass() &#x2F; removeClass() 添加&#x2F;移除 class</p>
<blockquote>
<p><code>$(&quot;button&quot;).addClass(&quot;animted bounce&quot;);</code><br>一次添加多个类可用空格分隔 如上添加了animted和bounce两个类<br><code> $(selector).removeClass(&quot;animted&quot;)</code><br>animted 和 bounce 需要引入 jQuery 库和 Animate.css 库，动画效果是通过 Animate.css 库实现的。</p>
</blockquote>
</li>
<li><p>css() 更改元素CSS</p>
<blockquote>
<p><code>$(&quot;p&quot;).css(&quot;color&quot;,&quot;blue&quot;); //key-value</code><br><code>$(&quot;p&quot;).css(&quot;display&quot;); //可以拿到属性值</code></p>
</blockquote>
</li>
<li><p>html() 获取或设置所选元素内容</p>
<blockquote>
<p><code>$(selector).html()</code>  &#x2F;&#x2F;取值<br><code>$(selector).html(content)</code> &#x2F;&#x2F;赋值<br><code>$(&quot;p:eq(1)&quot;).html(&#39;我是&lt;b&gt;被设置过的&lt;/b&gt;第二段&#39;);</code>  :eq(1)表示取第二个元素标签<br>相当innerHTML</p>
</blockquote>
</li>
<li><p>prop() 设置或返回被选元素的属性和值</p>
<blockquote>
<p><code>$(&quot;h2&quot;).prop(&quot;title&quot;,&quot;欢迎来到w3cschool学习jQuery&quot;);</code></p>
<ul>
<li>当用于设置属性值时候，则为匹配元素集合设置一个或多个属性&#x2F;值对。（即为所有符合的元素都 设置</li>
<li>当用于返回属性值时，则返回第一个匹配的元素的值</li>
<li>按钮的 disabled 属性值为 true时是禁用按钮</li>
</ul>
</blockquote>
</li>
<li><p>remove() 删除元素</p>
<blockquote>
<p><code>$(&quot;p&quot;).remove();</code></p>
</blockquote>
</li>
<li><p>click() 绑定点击事件</p>
<blockquote>
<p><code>$(selector).click(function()&#123; &#125;);</code></p>
</blockquote>
</li>
<li><p>appendTo() 在被选元素结尾插入HTML元素 (追加</p>
<blockquote>
<p><code>$(content).appendTo(selector)</code><br>也可以选取 HTML 标签并将其添加到另一个标签里面。<br><code>$(&quot;#target4&quot;).appendTo(&quot;#left-well&quot;);</code></p>
</blockquote>
</li>
<li><p>clone() 生成被选元素副本(含子节点、文本、属性)</p>
<blockquote>
<p><code>$(selector).clone(true|false)</code> &#x2F;&#x2F;默认false 不复制事件处理程序<br>如:<code>$(&quot;#target2&quot;).clone().appendTo(&quot;#right-well&quot;);</code>  &#x2F;&#x2F;复制t2并追加到右边 链式调用（function chaining） 同时调用几个方法</p>
</blockquote>
</li>
<li><p>​parent() 返回被选元素的直接父元素</p>
<blockquote>
<p><code>$(selector).parent(filter)</code><br><code>$(&quot;span&quot;).parent().css(&#123; color: &quot;red&quot;, border: &quot;2px solid red&quot; &#125;);</code> &#x2F;&#x2F;给父元素设置css<br><code>$(&quot;span&quot;).parent().parent()</code>  &#x2F;&#x2F;沿着 DOM 树向上遍历</p>
</blockquote>
</li>
<li><p>children() 返回被选元素的直接子元素</p>
<blockquote>
<p><code>$(selector).children(filter)</code><br><code>$(&quot;#btns&quot;).children().css</code> &#x2F;&#x2F;span有几个子孩子就会选中几个(如#btns里有三个子孩子则三个都会被选上并修改 ，只要是子孩子就会被修改 子孩子的孩子不会)<br><code>$(&quot;span&quot;).children().children()</code>  &#x2F;&#x2F;沿着 DOM 树向下遍历</p>
</blockquote>
</li>
<li><p>一些与个数有关的选择器</p>
<ol>
<li>:nth-child(n) :选取属于其父元素的不限类型的第 n 个子元素的所有元素<blockquote>
<p>n可以为 </p>
<ul>
<li>odd&#x2F;even 奇&#x2F;偶 </li>
<li>p:nth-child(3n+2)  每个第三段 从第二个孩子开始</li>
</ul>
</blockquote>
</li>
<li>$(“:odd”) :选取带有奇数索引号的每个元素 </li>
<li>$(“:even”) :选取带有偶数索引号的每个元素 ,索引值从0开始所以第一个偶数是0<blockquote>
<p><code>$(&quot;tr:odd&quot;).css(&quot;background-color&quot;, &quot;yellow&quot;);</code></p>
</blockquote>
</li>
</ol>
</li>
<li><p><code>$(&quot;body&quot;).addClass(&quot;animated fadeOut&quot;);</code> 整个页面淡出</p>
</li>
</ol>
]]></content>
      <categories>
        <category>JavaScript</category>
        <category>Jquery</category>
      </categories>
      <tags>
        <tag>JS</tag>
        <tag>Array</tag>
      </tags>
  </entry>
  <entry>
    <title>JS</title>
    <url>/2022/04/05/JavaScript/JS/</url>
    <content><![CDATA[<p>js常用事件方法记录，持续</p>
<span id="more"></span>
<h2 id="对象版块"><a href="#对象版块" class="headerlink" title="对象版块"></a>对象版块</h2><ol>
<li><p>如果object 属性名有空格需要双引号包起来</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">var myObj = &#123;</span><br><span class="line">   <span class="string">&quot;Space Name&quot;</span>: <span class="string">&quot;Petter&quot;</span>,</span><br><span class="line">   <span class="string">&quot;NoSpace&quot;</span>: <span class="string">&quot;Hello&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line">myObj[<span class="string">&quot;Space Name&quot;</span>]; <span class="regexp">//</span> Petter</span><br><span class="line">myObj[<span class="string">&quot;NoSpace&quot;</span>];    <span class="regexp">//</span> Hello</span><br></pre></td></tr></table></figure></li>
<li><p>用 点操作符​ &#x2F; 中括号操作符​ 来 获取&#x2F;更新 对象的属性值。   </p>
<ul>
<li>用中括号时候别忘了双引号 [“key”] </li>
<li>当属性(key)用变量表示&#x2F;含有空格时候  用中括号<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 中括号另一个使用方法 通过变量访问--&gt;</span></span><br><span class="line">attrName = &quot;na&quot;+&quot;me&quot;;</span><br><span class="line">var myName = myObj[attrName];</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--嵌套对象取值 --&gt;</span></span><br><span class="line">var gloveBoxContents = myStorage.car.inside[&quot;glove box&quot;];</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>点操作符​ &#x2F; 中括号操作符​新增对象</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">myDog[<span class="string">&quot;bark&quot;</span>]<span class="operator">=</span><span class="string">&quot;woof&quot;</span></span><br><span class="line">myDog.bark<span class="operator">=</span><span class="string">&quot;woof&quot;</span></span><br></pre></td></tr></table></figure></li>
<li><p>删除对象某个属性 <code>delete myObj.hobby;</code></p>
</li>
<li><p>hasOwnProperty()函数用于指示一个对象自身(不包括原型链)是否具有指定名称的属性。如果有，返回true，否则返回false。<br><code>var hasAge = myObj.hasOwnProperty(&quot;age&quot;);  // true</code><br><code>var hasMiddle = myObj.hasOwnProperty(&quot;middle&quot;); // false</code></p>
<p><code>或者 contacts[a][prop] !=  undefined</code></p>
</li>
<li><p>使用对象进行查找 ：对象和字典一样，可以用来存储键&#x2F;值对。</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="keyword">alpha</span> = &#123;</span><br><span class="line">   1:<span class="string">&quot;Z&quot;</span>,</span><br><span class="line">   2:<span class="string">&quot;Y&quot;</span>,</span><br><span class="line">   ...</span><br><span class="line">   24:<span class="string">&quot;C&quot;</span>,</span><br><span class="line">   25:<span class="string">&quot;B&quot;</span>,</span><br><span class="line">   26:<span class="string">&quot;A&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 查询字母表倒数第2个字母</span></span><br><span class="line"><span class="keyword">var</span> value = 2;</span><br><span class="line"><span class="keyword">alpha</span>[value]; <span class="comment">// &quot;Y&quot;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 综合应用 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 删除属性 --&gt;</span></span><br><span class="line">if(value === &quot;&quot;) delete collection[id][prop];</span><br><span class="line">else if(prop === &quot;tracks&quot;) &#123;</span><br><span class="line">   <span class="comment">&lt;!-- 给prop属性创建空数组 --&gt;</span></span><br><span class="line">   collection[id][prop] = collection[id][prop] || [];</span><br><span class="line">   collection[id][prop].push(value);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">   collection[id][prop] = value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="数组版块"><a href="#数组版块" class="headerlink" title="数组版块"></a>数组版块</h2><h3 id="1-数组嵌套-–-二维数组"><a href="#1-数组嵌套-–-二维数组" class="headerlink" title="1.数组嵌套 – 二维数组"></a>1.数组嵌套 – 二维数组</h3><blockquote>
<p><code>var myArray = [[&quot;let&quot;,9],[&quot;con&quot;,8]];</code></p>
</blockquote>
<h3 id="2-数组一些函数"><a href="#2-数组一些函数" class="headerlink" title="2.数组一些函数"></a>2.数组一些函数</h3><ol>
<li><p>push()可在末尾追加元素并返回新长度</p>
<blockquote>
<p><code>myArray.push([&quot;cat&quot;,3])</code></p>
</blockquote>
</li>
<li><p>pop()可删除数组最后一个元素并返回该元素值</p>
<blockquote>
<p><code>removedFromMyArray = myArray.pop()</code></p>
</blockquote>
</li>
<li><p>shift()可删除数组第一个元素并返回该元素值</p>
<blockquote>
<p><code>removedFromMyArray = myArray.shift()</code></p>
</blockquote>
</li>
<li><p>unshift()可在数组开头添加多个元素并返回长度</p>
<blockquote>
<p><code>myArray.unshift([&quot;Kelly&quot;,26])</code></p>
</blockquote>
<p>追加都是返回长度，删除是返回被删的元素</p>
</li>
<li><p><code>[n].concat(countdown(n-1));</code> 用于连接两个或多个数组</p>
</li>
</ol>
<h2 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h2><ol>
<li><p>生成随机小数 Math.random()<br><code>Math.random()用来生成一个在0（包括 0）到1（不包括 1）之间的随机小数</code></p>
</li>
<li><p>生成随机整数 </p>
<ul>
<li>用Math.floor()向下取整 获得它最近的整数。(非四舍五入)</li>
<li>Math.floor(Math.random()*10)  </li>
<li>*10 生成0-9整数  *20 生成0-19整数</li>
</ul>
</li>
<li><p>生成指定范围数</p>
<ul>
<li><code>Math.floor(Math.random() * (max - min + 1)) + min</code><h2 id="一些零碎易忘知识点"><a href="#一些零碎易忘知识点" class="headerlink" title="一些零碎易忘知识点"></a>一些零碎易忘知识点</h2></li>
</ul>
</li>
<li><p><code>===</code>   严格相等运算符<br><code>!==</code>   严格不等运算符<br>严格不相等运算符​不会转换值的数据类型</p>
</li>
<li><p><code>return;</code>返回undefined</p>
</li>
<li><p>parseInt() 解析一个字符串返回一个整数。</p>
<ol>
<li>注释：只有字符串中的第一个数字会被返回。</li>
<li>注释：开头和结尾的空格是允许的。<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line"><span class="built_in">var</span> <span class="built_in">num</span> = parseInt(<span class="string">&quot;45hello67&quot;</span>);</span><br><span class="line">console.<span class="built_in">log</span>(<span class="built_in">num</span>); // <span class="built_in">num</span> 的值为 <span class="number">45</span></span><br></pre></td></tr></table></figure></li>
<li><code>parseInt(string, radix);</code><ol>
<li>radix  —定义以几进制转换</li>
<li>当参数 ​radix​ 的值为 0，或没有设置该参数时，​parseInt()​ 会根据 ​string​ 来判断数字的基数,<blockquote>
<p>例如, string 以 “0x” 或 “0X” 开头，将以 16 为基数。<br>如果该参数小于 2 或者大于 36，则 parseInt() 将返回 ​NaN​。</p>
</blockquote>
<h3 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">switch(n)</span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">&lt;!-- case后面的冒号别忘了写啊 break也别忘了--&gt;</span></span><br><span class="line">   case 1:</span><br><span class="line">      执行代码块 1</span><br><span class="line">      break;</span><br><span class="line">   case 2:</span><br><span class="line">      执行代码块 2</span><br><span class="line">      break;</span><br><span class="line">   case 3:</span><br><span class="line">      执行代码块 3</span><br><span class="line">   default:</span><br><span class="line">      n 与 case 1 和 case 2 不同时执行的代码</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">&lt;!-- default可省非必要  最后一个执行块最好不要加break--&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 相同分支可合并 --&gt;</span></span><br><span class="line">switch(val) &#123;</span><br><span class="line">   case 1:</span><br><span class="line">   case 2:</span><br><span class="line">   case 3:</span><br><span class="line">      result = &quot;1, 2, or 3&quot;;</span><br><span class="line">      break;</span><br><span class="line">   case 4:</span><br><span class="line">      result = &quot;4 alone&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3></li>
</ol>
</li>
</ol>
</li>
</ol>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">   <span class="keyword">function</span> <span class="title">lookUpProfile</span>(name, prop)&#123;</span><br><span class="line">    for(var i in contacts)&#123;</span><br><span class="line">      if(contacts[i].firstName === name) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">contacts[i][prop]</span> || <span class="string">&quot;No such property&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="string">&quot;No such contact&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="comment">&lt;!-- 遍历奇数 --&gt;</span></span></span><br><span class="line"><span class="language-xml">for(var i=9;i&gt;0;i-=2)</span><span class="template-variable">&#123;&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><figure class="highlight ada"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title">Fibonacci</span> (n) &#123;</span><br><span class="line">   if ( n &lt;= 2 ) &#123;<span class="keyword">return</span> <span class="type">1&#125;</span>;</span><br><span class="line">   <span class="keyword">return</span> Fibonacci(n - <span class="number">1</span>) + Fibonacci(n - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;!<span class="comment">--  --&gt;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title">sum</span>(arr, n) &#123;     </span><br><span class="line">   if(n &lt;= 0) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="type">arr[0]</span>;</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> sum(arr, n - <span class="number">1</span>) + arr[n];</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>在文档加载完成后（即 HTML 输出已完成），再使用 ​document.write()​ 方法来要求浏览器来解析你的内容，则浏览器就会重写整个 ​document​，导致最后的这个 ​document.write()​ 方法输出的内容会覆盖之前所有的内容。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;是的，被我覆盖了&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>多媒体图文音视频</title>
    <url>/2023/03/02/html/video/</url>
    <content><![CDATA[<p>多媒体标签：picture &#x2F; Audio &#x2F; Video标签的使用总结归档</p>
<span id="more"></span>
<h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><blockquote>
<p>在 <code>&lt;picture&gt;</code> 标签中使用 <code>&lt;source&gt;</code> 来设置不同屏幕显示的图片：</p>
</blockquote>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">&lt;picture&gt;</span><br><span class="line">  &lt;source media<span class="operator">=</span><span class="string">&quot;(min-width:650px)&quot;</span> srcset<span class="operator">=</span><span class="string">&quot;https://static.runoob.com/images/runoob-logo.png&quot;</span>&gt;</span><br><span class="line">  &lt;source media<span class="operator">=</span><span class="string">&quot;(min-width:465px)&quot;</span> srcset<span class="operator">=</span><span class="string">&quot;https://static.runoob.com/images/code-icon-script.png&quot;</span>&gt;</span><br><span class="line">  &lt;img decoding<span class="operator">=</span><span class="string">&quot;async&quot;</span> src<span class="operator">=</span><span class="string">&quot;https://static.runoob.com/images/mix/hjkg_icon.png&quot;</span>  style<span class="operator">=</span><span class="string">&quot;width:auto;&quot;</span>&gt;</span><br><span class="line">&lt;/picture&gt;</span><br></pre></td></tr></table></figure>

<h2 id="音频Audio"><a href="#音频Audio" class="headerlink" title="音频Audio"></a>音频Audio</h2><blockquote>
<p><code>&lt;Audio&gt;</code>标签使用</p>
</blockquote>
<ul>
<li><code>&lt;embed&gt;</code> 标签在 HTML 4 中是无效的。页面无法通过 HTML 4 验证。</li>
<li>audio IE9.0支持</li>
<li>MP3 文件(IE、Chrome 以及 Safari 中是有效的), 同样添加了一个 OGG 类型文件(Firefox 和 Opera浏览器中有效)</li>
<li>可以在 <code>&lt;audio&gt;</code> 和 <code>&lt;/audio&gt;</code> 之间放置文本内容，这些文本信息将会被显示在那些不支持 <code>&lt;audio&gt;</code> 标签的浏览器中。</li>
<li><code>&lt;audio&gt;</code>属性:controls autoplay loop muted src  播放控件&#x2F;自动播放&#x2F;循环播放&#x2F;静音<ul>
<li>preload定义音频是否被加载以及如何加载：auto&#x2F;metadata&#x2F;none</li>
<li>preload&#x3D;”preload”：音频在页面加载时进行加载，并预备播放。</li>
</ul>
</li>
<li>可以在audio标签内写多个source标签来指定资源文件标签，浏览器会<b>选择第一个支持的格式</b>来进行播放。<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">id</span>=<span class="string">&quot;player&quot;</span> <span class="attr">controls</span> <span class="attr">autoplay</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;src/sulver_4.mp3&quot;</span> <span class="attr">type</span>=<span class="string">&quot;audio/mpeg&quot;</span>&gt;</span>  //source资源文件标签</span><br><span class="line">   <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;src/sulver_4.ogg&quot;</span> <span class="attr">type</span>=<span class="string">&quot;audio/ogg&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">embed</span> <span class="attr">height</span>=<span class="string">&quot;50&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100&quot;</span> <span class="attr">src</span>=<span class="string">&quot;src/sulver_4.ogg&quot;</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- Your browser does not support this audio format. --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Audio-x2F-Video-的一些方法-amp-属性设置-html5"><a href="#Audio-x2F-Video-的一些方法-amp-属性设置-html5" class="headerlink" title=" Audio&#x2F;Video 的一些方法&amp;属性设置  (html5)"></a><b> Audio&#x2F;Video 的一些方法&amp;属性设置  (html5)</b></h2><p><code>$(&#39;#player&#39;)[0]  // player是audio对象（js）。</code></p>
<blockquote>
<p><b>只读属性</b>：</p>
</blockquote>
<ul>
<li><code>player.duration</code>音频总时长 双精度浮点数double。返回音频的总时长，单位为秒。<ul>
<li>注意：如果音频元数据还没加载好，则这个值会是NaN <figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">const audioDOM = document.get<span class="constructor">ElementById(<span class="string">&quot;audio&quot;</span>)</span>;</span><br><span class="line"><span class="keyword">if</span> (is<span class="constructor">NaN(<span class="params">audioDOM</span>.<span class="params">duration</span>)</span>) &#123;</span><br><span class="line">   <span class="comment">// 未加载时的操作</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="comment">// 已加载时的操作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><code>player.paused</code> &#x2F;&#x2F;音频是否暂停 返回boolean </li>
<li><code>player.ended</code> boolean</li>
<li><code>player.currentSrc</code> &#x2F;&#x2F;当前音频链接</li>
<li><code>player.buffered</code>  &#x2F;&#x2F;已缓存范围 可用来做缓存进度条 <figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">示例（获取已加载的比例）:</span><br><span class="line"><span class="built_in">let</span> audio = document.getElementById(<span class="string">&quot;audio&quot;</span>);</span><br><span class="line"><span class="built_in">let</span> timeRanges = audio.buffered;</span><br><span class="line"><span class="built_in">let</span> <span class="built_in">num</span> = <span class="number">0</span>;</span><br><span class="line"><span class="comment">/*获取已加载时长，然后除以歌曲时长，即可得到已加载比例*/</span></span><br><span class="line"><span class="keyword">if</span>(timeRanges.<span class="built_in">length</span> &gt; <span class="number">0</span>)</span><br><span class="line">   <span class="built_in">num</span> = parseInt(timeRanges.end(timeRanges.<span class="built_in">length</span> - <span class="number">1</span>) * <span class="number">100</span> / audio.duration);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">num</span> &gt; <span class="number">100</span>)</span><br><span class="line">   <span class="built_in">num</span> = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">num</span> &lt; <span class="number">0</span>)</span><br><span class="line">   <span class="built_in">num</span> = <span class="number">0</span>;</span><br></pre></td></tr></table></figure></li>
<li><code>seekable</code> 可跳转范围,TimeRanges对象。同buffered。</li>
<li><code>networkState</code>网络范围</li>
<li><code>error </code>发生错误<ul>
<li>code 错误码：<ul>
<li>MEDIA_ERR_ABORTED，音频加载加载过程中由于用户操作而被终止.</li>
<li>MEDIA_ERR_NETWORK，确认音频资源可用，但是加载时出现网路错误，音频加载被终止</li>
<li>MEDIA_ERR_DECODE，确认音频资源可用，但是解码发生错误</li>
<li>MEDIA_ERR_SRC_NOT_SUPPORTED，音频格式不被支持或者资源不可用.</li>
</ul>
</li>
<li>message 错误描述信息</li>
</ul>
</li>
<li><code>seeking</code> 是否移动或跳转播放进度 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">seeking</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">   <span class="keyword">const</span> audioDOM = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;audio&quot;</span>);</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(audioDOM.<span class="property">seeking</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<blockquote>
<p><b>可读写</b>:</p>
</blockquote>
<ul>
<li><code>player.currentTime</code> &#x2F;&#x2F;设置或返回音频&#x2F;视频播放的当前位置（以秒计），当设置该属性时，播放会跳跃到指定的位置。<ul>
<li>双精度浮点数double，返回已经播放的时长，单位为秒。可以给它赋值修改，来实现快进，回退，跳转等功能</li>
<li>取值应在 [0, (duration)]</li>
</ul>
</li>
<li><code>player.volume = value;</code> &#x2F;&#x2F;设置音量 双精度浮点数double，返回当前音量大小，<ul>
<li>默认为 1，值为0时为静音。可修改它来增大，降低音量</li>
<li>取值应在 [0, 1]</li>
</ul>
</li>
<li><code>player.playbackRate</code>播放速度 双精度浮点数double，返回当前播放速度，默认为 1. 取值建议在 [0, 2] <figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">if</span> (audioDOM.playbackRate &gt;= <span class="number">2</span>)</span><br><span class="line">   <span class="attribute">audioDOM</span>.playbackRate = <span class="number">0</span>.<span class="number">5</span>;</span><br><span class="line"><span class="attribute">else</span></span><br><span class="line">   <span class="attribute">audioDOM</span>.playbackRate += <span class="number">0</span>.<span class="number">25</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
<blockquote>
<p><b>标签属性控制</b>  loop &#x2F; controls &#x2F; muted &#x2F; autoplay 属性都会返回布尔值boolean，可读写设置对应的标签属性是否启用</p>
</blockquote>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">const audioDOM <span class="operator">=</span> document.getElementById(<span class="string">&quot;audio&quot;</span>)<span class="comment">;</span></span><br><span class="line">audioDOM.controls <span class="operator">=</span> true<span class="comment">;</span></span><br><span class="line">if(audioDOM.loop <span class="operator">=</span><span class="operator">=</span> false)&#123;</span><br><span class="line">   audioDOM.loop <span class="operator">=</span> true<span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><b>JS操作函数</b></p>
</blockquote>
<ul>
<li><p><code>player.play()</code>  &#x2F;&#x2F;播放音频</p>
 <figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (audioDOM.canPlay == true) &#123;   <span class="regexp">//</span>如果资源准备好可以播放</span><br><span class="line"><span class="keyword">if</span> (audioDOM.paused == true)  <span class="regexp">//</span>音频为暂停状态</span><br><span class="line">   audioDOM.play();    <span class="regexp">//</span>播放</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   audioDOM.pause();   <span class="regexp">//</span>暂停</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><code>player.pause()</code> &#x2F;&#x2F;暂停</p>
</li>
<li><p><code>player.pause() player.currentTime=0</code>&#x2F;&#x2F;停止</p>
<ul>
<li><code> &lt;input id=&quot;volume&quot; type=&quot;range&quot; min=&quot;0&quot; max=&quot;1&quot; step=&quot;0.1&quot; /&gt;</code></li>
</ul>
</li>
<li><p><code>load()</code> &#x2F;&#x2F;重新加载音频&#x2F;视频元素。 如果没有设置 preload ，则可以在js调用该函数来触发加载</p>
 <figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">//更改视频来源，并重载视频：</span><br><span class="line">document.getElementById(<span class="string">&quot;mp4_src&quot;</span>).src<span class="operator">=</span><span class="string">&quot;movie.mp4&quot;</span><span class="comment">;</span></span><br><span class="line">document.getElementById(<span class="string">&quot;ogg_src&quot;</span>).src<span class="operator">=</span><span class="string">&quot;movie.ogg&quot;</span><span class="comment">;</span></span><br><span class="line">document.getElementById(<span class="string">&quot;video1&quot;</span>).load()<span class="comment">;</span></span><br></pre></td></tr></table></figure></li>
<li><p><code>canPlayType()</code> 方法浏览器是否能播放指定的音频&#x2F;视频类型。</p>
<ul>
<li>“probably” - 浏览器最可能支持该音频&#x2F;视频类型</li>
<li>“maybe” - 浏览器也许支持该音频&#x2F;视频类型</li>
<li>“” - （空字符串）浏览器不支持该音频&#x2F;视频类型<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;probably&quot;</span> - 浏览器最可能支持该音频/视频类型</span><br><span class="line"><span class="string">&quot;maybe&quot;</span> - 浏览器也许支持该音频/视频类型</span><br><span class="line"><span class="string">&quot;&quot;</span> - （空字符串）浏览器不支持该音频/视频类型</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><code>addTextTrack()</code> &#x2F;&#x2F;向音频&#x2F;视频添加新的文本轨道 (暂时不知道用途主流不支持)</p>
</li>
</ul>
<blockquote>
<p><b>事件</b></p>
</blockquote>
<ul>
<li><code>loadstart</code>开始加载</li>
<li><code>durationchange</code>时长改变 ： 音频的总时长改变了。一般就是加载好歌曲的元数据了，或者是切换audio标签的src资源，即切换歌曲的时候。</li>
<li><code>loadedmetadata</code>元数据加载完毕<ul>
<li>可以用作判断“音频初始化”的方法。当然初始化也可以用duration属性是否为NaN或者durationchange来判断。其中元数据就包含有歌曲总时长，标题，艺术家等信息。</li>
</ul>
</li>
<li><code>loadeddata</code> 数据开始加载</li>
<li><code>progress</code> 加载中<ul>
<li>每次浏览器一加载，就会触发这个事件。</li>
<li>注意这个事件并不是在加载完成前一直触发，浏览器一般一开始只会加载一部分，然后等你播放或跳跃到和已经加载的音频差不多或是已经超过的时候，才会开始再加载一部分，以此直到完成加载整个音频。</li>
<li>加载进度条的长度改变函数，就可以绑定在这个事件上。</li>
</ul>
</li>
<li><code>canplay</code> 可以播放<ul>
<li>音频可以播放了。音频只加载了一部分，但已经可以开始播放了</li>
<li>可以通过这个事件来设置加载动画。触发前启用加载动画，触发后移除加载动画</li>
</ul>
</li>
<li><code>canplaythrough</code>  可以播放整个音频<ul>
<li>浏览器预计在不停下来进行缓冲的情况下，能够持续播放音频时会触发</li>
</ul>
</li>
<li><code>player.oncanplay = function () &#123;//播放时候执行&#125;</code><blockquote>
<p>其他事件</p>
</blockquote>
</li>
<li><code>timeupdate</code> 已播放时长更新<ul>
<li>即 currentTime 更新了，最频繁是每250毫秒触发一次。</li>
<li>播放进度条长度改变函数就可以绑定在这个事件上</li>
</ul>
</li>
<li><code>waiting</code> 等待资源中 由于没有数据而导致暂停时触发.可用于绑定加载动画</li>
<li><code>playing</code>播放中 从waiting状态转换到可以播放的状态时触发。</li>
<li><code>play</code>播放<code> play()</code>方法被调用时触发。</li>
<li><code>pause</code>暂停 <code>pause()</code>方法被调用时触发。</li>
<li><code>ended</code>结束 音频播放完毕后触发。 ，可以实现播放列表的循环播放，随机播放<ul>
<li>当设置了autoplay时，不会触发这个事件</li>
<li>利用这个事件，可以实现播放列表的循环播放，随机播放。当触发时，切换src资源链接，并等待加载触发canplay，然后play()播放。</li>
</ul>
</li>
<li><code>volumechange</code>音量改变. 音量条的函数可以绑定在这个事件上</li>
<li><code>ratechange</code> 播放速率改变</li>
<li><code>error</code> 发生错误</li>
</ul>
<blockquote>
<p><b>js控制从某个时刻开始播放</b><br>   <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 从某个时刻开始播放  </span></span><br><span class="line"><span class="keyword">var</span> player=$(<span class="string">&quot;#player&quot;</span>)[<span class="number">0</span>];</span><br><span class="line">player.<span class="property">currentTime</span> = <span class="number">4</span>; <span class="comment">//从4s位置开始播放</span></span><br><span class="line">player.<span class="title function_">play</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.5s后停止播放</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">   player.<span class="title function_">pause</span>()</span><br><span class="line">&#125;,<span class="number">1500</span>)</span><br></pre></td></tr></table></figure><br><b>js创建audio对象</b><br>   <figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">// <span class="number">1</span>.</span><br><span class="line">var audio <span class="operator">=</span> document.createElement(<span class="string">&quot;audio&quot;</span>)<span class="comment">;</span></span><br><span class="line">audio.src <span class="operator">=</span> <span class="string">&quot;hangge.mp3&quot;</span><span class="comment">;</span></span><br><span class="line">audio.play()<span class="comment">;</span></span><br><span class="line">//<span class="number">2</span>.</span><br><span class="line">var audio <span class="operator">=</span> new Audio(<span class="string">&quot;hangge.mp3&quot;</span>)<span class="comment">;</span></span><br><span class="line">audio.play()<span class="comment">;</span></span><br><span class="line">//通过canPlayType()方法可以判断浏览器支持的编码方式，从而设置对应的音频文件。</span><br><span class="line">if (audio.canPlayType(<span class="string">&quot;audio/mp3&quot;</span>)) &#123;</span><br><span class="line">   audio.src <span class="operator">=</span> <span class="string">&quot;hangge.mp3&quot;</span><span class="comment">;</span></span><br><span class="line">&#125;else if(audio.canPlayType(<span class="string">&quot;audio/ogg&quot;</span>)) &#123;</span><br><span class="line">   audio.src <span class="operator">=</span> <span class="string">&quot;hangge.ogg&quot;</span><span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="视频video"><a href="#视频video" class="headerlink" title="视频video"></a>视频video</h2><blockquote>
<p><code>&lt;video&gt;</code>标签使用<br>最好的 HTML 解决方法 : <b>HTML 5 +<code> &lt;object&gt;</code> +<code>&lt;embed&gt;</code></p>
</blockquote>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">//HTML <span class="number">5</span> &lt;video&gt; 元素会尝试播放以 mp4、ogg 或 webm 格式中的一种来播放视频。</span><br><span class="line">//如果均失败，则回退到 &lt;embed&gt; 元素。</span><br><span class="line">&lt;video width<span class="operator">=</span><span class="string">&quot;320&quot;</span> height<span class="operator">=</span><span class="string">&quot;240&quot;</span> controls<span class="operator">=</span><span class="string">&quot;controls&quot;</span>&gt;</span><br><span class="line">&lt;source src<span class="operator">=</span><span class="string">&quot;movie.mp4&quot;</span> type<span class="operator">=</span><span class="string">&quot;video/mp4&quot;</span> /&gt;</span><br><span class="line">&lt;source src<span class="operator">=</span><span class="string">&quot;movie.ogg&quot;</span> type<span class="operator">=</span><span class="string">&quot;video/ogg&quot;</span> /&gt;</span><br><span class="line">&lt;source src<span class="operator">=</span><span class="string">&quot;movie.webm&quot;</span> type<span class="operator">=</span><span class="string">&quot;video/webm&quot;</span> /&gt;</span><br><span class="line">&lt;object data<span class="operator">=</span><span class="string">&quot;movie.mp4&quot;</span> width<span class="operator">=</span><span class="string">&quot;320&quot;</span> height<span class="operator">=</span><span class="string">&quot;240&quot;</span>&gt;</span><br><span class="line">   &lt;embed src<span class="operator">=</span><span class="string">&quot;movie.swf&quot;</span> width<span class="operator">=</span><span class="string">&quot;320&quot;</span> height<span class="operator">=</span><span class="string">&quot;240&quot;</span> /&gt;</span><br><span class="line">&lt;/object&gt;</span><br><span class="line">&lt;/video&gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>HTML4 无法识别 <code>&lt;embed&gt;</code> 标签。您的页面无法通过验证。</li>
<li>如果浏览器不支持 Flash，那么视频将无法播放</li>
<li>iPad 和 iPhone 不能显示 Flash 视频。</li>
</ul>
</blockquote>
<h2 id="对象object"><a href="#对象object" class="headerlink" title="对象object"></a>对象object</h2><blockquote>
<p><code>&lt;object&gt;</code> 标签用于包含对象，比如图像、音频、视频、Java applets、ActiveX、PDF 以及 Flash。</p>
</blockquote>
<ul>
<li>如果未显示 object 元素，就会执行位于<code> &lt;object&gt;</code> 和 <code>&lt;/object&gt;</code> 之间的代码。通过这种方式，我们能够嵌套多个 object 元素（每个对应一个浏览器）。</li>
<li>不要对图像使用<code> &lt;object&gt;</code> 标签，请使用<code> &lt;img&gt;</code> 标签代替。   <figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">&lt;object classid<span class="operator">=</span><span class="string">&quot;clsid:F08DF954-8592-11D1-B16A-00C0F0283628&quot;</span> id<span class="operator">=</span><span class="string">&quot;Slider1&quot;</span> width<span class="operator">=</span><span class="string">&quot;100&quot;</span> height<span class="operator">=</span><span class="string">&quot;50&quot;</span>&gt;</span><br><span class="line">   &lt;param name<span class="operator">=</span><span class="string">&quot;BorderStyle&quot;</span> value<span class="operator">=</span><span class="string">&quot;1&quot;</span> /&gt;</span><br><span class="line">   &lt;param name<span class="operator">=</span><span class="string">&quot;MousePointer&quot;</span> value<span class="operator">=</span><span class="string">&quot;0&quot;</span> /&gt;</span><br><span class="line">   &lt;param name<span class="operator">=</span><span class="string">&quot;Enabled&quot;</span> value<span class="operator">=</span><span class="string">&quot;1&quot;</span> /&gt;</span><br><span class="line">   &lt;param name<span class="operator">=</span><span class="string">&quot;Min&quot;</span> value<span class="operator">=</span><span class="string">&quot;0&quot;</span> /&gt;</span><br><span class="line">   &lt;param name<span class="operator">=</span><span class="string">&quot;Max&quot;</span> value<span class="operator">=</span><span class="string">&quot;10&quot;</span> /&gt;</span><br><span class="line">&lt;/object&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="相关链接以及参考mark"><a href="#相关链接以及参考mark" class="headerlink" title="相关链接以及参考mark"></a>相关链接以及参考mark</h2><ul>
<li>HTML 音频&#x2F;视频 DOM 参考手册 ：<a href="https://www.runoob.com/tags/ref-av-dom.html">https://www.runoob.com/tags/ref-av-dom.html</a></li>
<li>音乐播放器exp <a href="https://www.cnblogs.com/coderwcb/p/16090563.html">https://www.cnblogs.com/coderwcb/p/16090563.html</a></li>
</ul>
<ul>
<li>JS实现audio音频剪裁剪切复制播放与上传(步骤详解 <a href="http://www.ay1.cc/article/33460.html">http://www.ay1.cc/article/33460.html</a></li>
<li>时间转换？<a href="https://www.jb51.net/article/200835.htm">https://www.jb51.net/article/200835.htm</a></li>
<li>笔记部分摘要!!<br> <a href="https://blog.coolight.cool/htmlaudio%e9%9f%b3%e9%a2%91%e6%a0%87%e7%ad%be%e7%9a%84%e5%b1%9e%e6%80%a7%e5%92%8c%e4%ba%8b%e4%bb%b6/">https://blog.coolight.cool/htmlaudio%e9%9f%b3%e9%a2%91%e6%a0%87%e7%ad%be%e7%9a%84%e5%b1%9e%e6%80%a7%e5%92%8c%e4%ba%8b%e4%bb%b6/</a></li>
<li>html属性方法 <a href="https://www.runoob.com/tags/ref-eventattributes.html">https://www.runoob.com/tags/ref-eventattributes.html</a></li>
</ul>
]]></content>
      <categories>
        <category>Html</category>
      </categories>
      <tags>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML + CSS基础</title>
    <url>/2022/03/30/html/HTML/</url>
    <content><![CDATA[<h2 id="使用-CSS-变量更改多个元素样式"><a href="#使用-CSS-变量更改多个元素样式" class="headerlink" title="使用 CSS 变量更改多个元素样式"></a>使用 CSS 变量更改多个元素样式</h2><blockquote>
<p>var()​ 函数用于插入自定义的属性值<br>如果一个属性值在多处被使用，该方法就很有用。</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">var</span>(custom-property-name, value)</span><br><span class="line">custom-property-name 是必需的, 自定义属性的名称，必需以 -- 开头。</span><br><span class="line">value 可选。备用值，在属性不存在的时候使用。 </span><br><span class="line"></span><br><span class="line"><span class="selector-id">#div1</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">var</span>(--main-bg-color);</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">var</span>(--main-txt-color);</span><br><span class="line">  <span class="attribute">padding</span>: <span class="built_in">var</span>(--main-padding);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="创建一个自定义的-CSS-变量"><a href="#创建一个自定义的-CSS-变量" class="headerlink" title="创建一个自定义的 CSS 变量"></a>创建一个自定义的 CSS 变量</h3><blockquote>
<p><code>--penguin-skin: gray;</code>  创建一个 CSS 变量，只需要在变量名前添加两个破折号，并为其赋值<br>其他元素可通过该变量来设置为gray（灰色）。 </p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 建变量 --&gt;</span></span><br><span class="line">.rabbit &#123;</span><br><span class="line">    --rabbit-skincolor: white;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">&lt;!-- 使用 --&gt;</span></span><br><span class="line">.rabbit .rabbit__body &#123;</span><br><span class="line">   background: var(--rabbit-skincolor);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>变量不生效时设定默认值:<br><code>background: var(--penguin-skin, black);</code></p>
</blockquote>
<blockquote>
<p>通过浏览器降级提高兼容性</p>
</blockquote>
<ul>
<li>如果使用 CSS 变量来指定站点的背景色， IE 浏览器由于不支持 CSS 变量会忽视背景色。</li>
<li>在声明之前提供另一个更宽泛的值即可。</li>
<li>这样老旧的浏览器会降级使用这个方案，新的浏览器会在后面的声明里覆盖降级方案。 <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.white-box</span> &#123;</span><br><span class="line">   <span class="attribute">background</span>: <span class="number">#FFF</span>;</span><br><span class="line">   <span class="attribute">background</span>: <span class="built_in">var</span>(--white-color);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h4 id="变量继承"><a href="#变量继承" class="headerlink" title="变量继承"></a>变量继承</h4></li>
<li>CSS 变量经常会定义在 :root 元素内，这样就可被所有选择器继承。</li>
<li>:root 是一个 pseudo-class 选择器匹配文档的根选择器，通常指 html 元素。</li>
<li>通过在 :root 里创建变量，变量在全局可用，以及在 ​style ​样式的选择器里也生效。 <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-pseudo">:root</span> &#123;</span></span><br><span class="line"><span class="language-css">   <span class="attr">--rabbit-ear-shadow</span>:pink;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>如果在元素里创建相同的变量，会重写:root变量设置的值。<ul>
<li>更改特定区域的变量 <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">.rabbit &#123;</span><br><span class="line">   --rabbit-ear-shadow: black; </span><br><span class="line">   <span class="comment">&lt;!-- 重写成黑色原来是粉色pink --&gt;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="使用媒体查询更改变量"><a href="#使用媒体查询更改变量" class="headerlink" title="使用媒体查询更改变量"></a>使用媒体查询更改变量</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@media</span> (<span class="attribute">max-width</span>: <span class="number">350px</span>) &#123;</span><br><span class="line">   <span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">      <span class="attr">--rabbit-basecolor</span>: white;</span><br><span class="line">      <span class="attr">--rabbit-background</span>:<span class="built_in">rgb</span>(<span class="number">198</span>, <span class="number">250</span>, <span class="number">241</span>)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;	</span><br></pre></td></tr></table></figure>
<h2 id="1-margin"><a href="#1-margin" class="headerlink" title="1.margin"></a>1.margin</h2><blockquote>
<p>margin ​清除周围的（外边框）元素区域。如果你设置元素margin为负值，元素会变得更大。<br>em是相对fon-size</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<h2 id="2-border"><a href="#2-border" class="headerlink" title="2.border"></a>2.border</h2><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4>   <figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">.img-<span class="built_in">border</span> &#123;</span><br><span class="line"> <span class="built_in">border</span>-<span class="built_in">style</span>: dashed;</span><br><span class="line"> <span class="built_in">border</span>-<span class="built_in">color</span>: blue;</span><br><span class="line"> <span class="built_in">border</span>-<span class="built_in">width</span>: 6px;</span><br><span class="line"> <span class="built_in">border</span>-<span class="built_in">radius</span>:10px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>宽高一致时将border-radius的值设置为50% 能得到圆形</p>
</blockquote>
<h5 id="border-style"><a href="#border-style" class="headerlink" title="border-style:"></a>border-style:</h5><ul>
<li>dashed&#x2F;dotted 虚线边框  </li>
<li>solid  </li>
<li>double 双边框 </li>
<li>qroove 凹槽边框  </li>
<li>ridge 垄状边框 </li>
<li>inset 嵌入边框 outset 外凸边框  </li>
<li>hidden 隐藏边框<h2 id="3-CSS优先级"><a href="#3-CSS优先级" class="headerlink" title="3.CSS优先级"></a>3.CSS优先级</h2>优先级关系：内联样式 &gt; ID 选择器 <blockquote>
<p>类选择器 &#x3D; 属性选择器 &#x3D; 伪类选择器<br>标签选择器 &#x3D; 伪元素选择器<br>!important<br><code>.pink-text &#123;color: pink !important;&#125;</code></p>
</blockquote>
<h2 id="十六进颜色"><a href="#十六进颜色" class="headerlink" title="十六进颜色"></a>十六进颜色</h2><blockquote>
<p><a href="https://www.w3cschool.cn/cssref/css-colorsfull.html">https://www.w3cschool.cn/cssref/css-colorsfull.html</a></p>
</blockquote>
<h2 id="4-引入外部字体"><a href="#4-引入外部字体" class="headerlink" title="4.引入外部字体"></a>4.引入外部字体</h2></li>
</ul>
<ol>
<li><code>&lt;link href=&quot;https://fonts.loli.net/css?family=Lobster&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt;</code> </li>
<li>使用 <code>font-family:Lobster</code><blockquote>
<p>多个字体用逗号隔开</p>
</blockquote>
</li>
</ol>
]]></content>
      <categories>
        <category>Html</category>
      </categories>
      <tags>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>js函数&amp;方法概念以及this指向归纳</title>
    <url>/2023/03/03/JavaScript/function/</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>javascript中function&amp;method的概念以及this指向 </p>
</blockquote>

<span id="more"></span>
<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><div class="note info"><p>函数分为具名函数function fn(){} 和 匿名函数function(){}。此处主要介绍匿名函数</p>
<h2 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h2><ol>
<li>匿名函数的使用方式主要两种：函数表达式 和 立即执行函数</li>
<li>匿名函数的使用场景：webAPI , JQ中大量使用了。<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">let btn = document.querySelector(<span class="string">&#x27;button&#x27;</span>)</span><br><span class="line">btn.onclick=<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">btn.addEventListener(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;&#125;)</span><br><span class="line">// $(<span class="string">&quot;.btn&quot;</span>).on(<span class="string">&quot;click&quot;</span>,<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;&#125;)</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="函数表达式"><a href="#函数表达式" class="headerlink" title="函数表达式"></a>函数表达式</h3><ol>
<li>函数表达式即：将匿名函数赋值给一个变量，并通过变量名称进行调用。</li>
<li>函数表达式与具名函数的不同点：</li>
</ol>
<ul>
<li>var 声明的函数表达式具有<b>声明提升但赋值不提升</b>的特点，所以<mark>不能在赋值语句之前调用</mark>。 在赋值之前调用 变量名存在但是还没赋值 会返回“undefined”</li>
<li>具名函数具有声明提升特性，<mark>可以在任意地方调用且会正常执行</mark>。<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 函数表达式</span></span><br><span class="line">fn(<span class="number">1</span>,<span class="number">3</span>)  <span class="comment">// &quot;undefined&quot;</span></span><br><span class="line"><span class="keyword">var</span> fn = <span class="keyword">function</span>(<span class="params">x,y</span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.<span class="built_in">log</span>(x+y);</span><br><span class="line">&#125;</span><br><span class="line">fn(<span class="number">1</span>,<span class="number">2</span>)  <span class="comment">//3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//具名函数</span></span><br><span class="line">fun1(<span class="number">4</span>,<span class="number">3</span>)  <span class="comment">//7</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun1</span>(<span class="params">x,y</span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.<span class="built_in">log</span>(x+y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
### 立即执行函数 (function(){})()</li>
</ul>
<ol>
<li>函数定义完，立即被调用</li>
<li>立即执行函数只会执行一次</li>
<li>可以传参<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params">a,b</span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&quot;a= &quot;</span>+a,<span class="string">&quot;b= &quot;</span>+b)</span><br><span class="line">&#125;)(<span class="number">123</span>,<span class="number">456</span>)</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="函数和方法区别"><a href="#函数和方法区别" class="headerlink" title="函数和方法区别"></a>函数和方法区别</h1><div class="note info"><ol>
<li>函数可以作为对象的属性。如果一个函数作为一个对象的属性保存，则这个函数就是这个对象一个方法，调用这个函数即调用对象的方法.</li>
<li>两者作用效果上没区别只是名称上区别。</li>
<li>fun()  obj.fun()  前者是调函数，后者调方法。</li>
</ol></div>

<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;全局name&#x27;</span></span><br><span class="line">function <span class="function"><span class="title">fun</span><span class="params">()</span></span>&#123;</span><br><span class="line">    console.log(<span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name:<span class="string">&#x27;objname&#x27;</span>,</span><br><span class="line">    sayName=<span class="function"><span class="keyword">fun</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">    name:<span class="string">&#x27;obj2name&#x27;</span>,</span><br><span class="line">    sayName=<span class="function"><span class="keyword">fun</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(obj.sayName === <span class="function"><span class="keyword">fun</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//函数形式调用，this指向window 所以name是window上的name即全局name</span></span><br><span class="line"><span class="function"><span class="title">fun</span><span class="params">()</span></span>  <span class="comment">//打印 全局name  fun() 是window.fun()的缩写</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法的形式调用 obj里的sayName方法。</span></span><br><span class="line">obj.sayName(); <span class="comment">// 此时this指向obj，打印结果  objname</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//同理调用obj2里的sayName方法 </span></span><br><span class="line">obj2.sayName() <span class="comment">//this指向obj2  打印：ob2jname</span></span><br></pre></td></tr></table></figure></div>
<h1 id="this-上下文-的指向情况"><a href="#this-上下文-的指向情况" class="headerlink" title="this 上下文 的指向情况"></a>this 上下文 的指向情况</h1><div class="note primary"><ol>
<li>this是一个指针型变量，它动态指向当前函数的运行环境。</li>
<li>浏览器（解析器）在每次调用函数时候都会向其内部传递一个隐含参数，这个参数就是this</li>
</ol></div>

<ol>
<li>以<b>函数形式调用</b>时(fun())，this都是window。（因为function挂载在window上，调用时相当于 <b>window.fun()</b><ul>
<li>注意：<b>严格模式下,必须严格的写出被调用的函数的对象.不可以省略</b>，this指向的是undefined，window.fun()的this才指向window</li>
</ul>
</li>
<li>以<b>方法形式调用</b>时(obj.sayName())，this指向调用该方法的对象。（谁调用this就指向谁</li>
</ol>
<ul>
<li>1-2点的示例如上代码的14-end。</li>
</ul>
<div class="note info"><p>补充：对象嵌套时候this指向</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">function <span class="function"><span class="title">fun</span><span class="params">()</span></span>&#123;</span><br><span class="line">    console.log(<span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line">    name:obj1</span><br><span class="line">    obj2:&#123;</span><br><span class="line">        name:obj2,</span><br><span class="line">        sayName:<span class="function"><span class="keyword">fun</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用的是obj2的sayName方法而不是obj的sayName方法 所以this指向obj2</span></span><br><span class="line">obj.obj2.sayName()   <span class="comment">//打印：obj2  this指向obj2 </span></span><br></pre></td></tr></table></figure></div>

<ol start="3">
<li>以<b>构造函数形式调用</b>时，this是新创建的那个对象。</li>
<li>使用<b>call和apply</b>调用时，this 是call()&#x2F;apply()传入的第一个参数。</li>
<li><b>箭头函数</b>的this指向于函数作用域所用的对象。  ？？？</li>
</ol>
<h2 id="箭头函数this指向"><a href="#箭头函数this指向" class="headerlink" title="箭头函数this指向"></a>箭头函数this指向</h2><div class="note info"><ol>
<li>箭头函数的重要特征：箭头函数中<b>没有this和arguments</b></li>
<li>箭头函数没有自己的this指向，它会<b>捕获自己定义所处的外层执行环境</b>，并且继承这个this值,指向当前定义时所在的对象。箭头函数的this指向在被定义的时候就确定了，之后永远都不会改变。</li>
<li>即使使用call()、apply()、bind()等方法也<b>无法改变</b>其this指向。</li>
</ol>
<figure class="highlight kotlin"><figcaption><span>example1</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">//声明的是全局变量Obj，this指向箭头函数所在全局作用域的对象，即window对象。</span></span><br><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span>:<span class="params">()</span></span>=&gt;&#123;</span><br><span class="line">        console.log(<span class="keyword">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="keyword">fun</span>()  <span class="comment">// 输出对象 window  </span></span><br><span class="line">    </span><br></pre></td></tr></table></figure>

<ol>
<li>由于show函数是箭头函数，所以自身不能绑定this，因此找它的上一级作用域。如果父级作用域还是箭头函数，就再往上找，直到找到this的指向。</li>
<li>window.obj.show(),obj是对象，非箭头函数，所以找到这里就停止了，this绑定到obj上。window调用obj，所以obj中的this也指向window。<figure class="highlight dart"><figcaption><span>example2</span></figcaption><table><tr><td class="code"><pre><span class="line">let <span class="keyword">show</span> = ()=&gt;&#123;</span><br><span class="line">    console.log(<span class="string">&quot;this指向 &quot;</span>+<span class="keyword">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">    <span class="keyword">show</span>:<span class="keyword">show</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">show</span>()        <span class="comment">//结果 this指向 window</span></span><br><span class="line"></span><br><span class="line">obj2.<span class="keyword">show</span>()   <span class="comment">//结果 this指向 window</span></span><br><span class="line"></span><br><span class="line">    </span><br></pre></td></tr></table></figure></li>
</ol></div>

<h2 id="构造函数this指向实例"><a href="#构造函数this指向实例" class="headerlink" title="构造函数this指向实例"></a>构造函数this指向实例</h2><div class="note info"><p>构造函数知识：<br>“对象”是单个实物的抽象。通常需要一个模板，表示某一类实物的共同特征，然后“对象”根据这个模板生成。<br>js语言中使用构造函数（constructor）作为对象的模板；<br>所谓构造函数，就是提供一个生成对象的模板，并描述对象的基本结构的函数。<br>一个构造函数，可以生成多个对象，每个对象都有相同的结构。</p>
<p><b>构造函数的函数名首字母要大写</b></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name,age,sex</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">sex</span> = sex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;piero&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;boy&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">name</span>); <span class="comment">//piero</span></span><br></pre></td></tr></table></figure>

<p><b>构造函数的原理：</b><br><img src="https://img-blog.csdnimg.cn/3317d7238cfa4c72807478874ad80cd9.png#pic_center" alt="构造函数的原理图"></p>
<ol>
<li>自从用new调用函数后，JS引擎就会在内存中创建一个空对象{}<br>const newObj &#x3D; {};</li>
<li>新对象的__proto__属性指向构造函数的原型对象<br>（通俗理解就是新对象隐式原型__proto__链接到构造函数显式原型prototype上。）<br><code>newObj.__proto__ = functionName.prototype</code></li>
<li>构造函数内部的this会指向这个新对象（即将构造函数的作用域指向新对象）<br> <code>this = newObj</code></li>
<li>从上到下执行函数体（只有这步是我们能直观看到代码的）</li>
<li>返回创造出来的对象（如果构造函数没有返回对象，则默认返回this。在函数体内部的this指向新创建的内存空间，默认返回 this 就相当于默认返回了该内存空间）<figure class="highlight kotlin"><figcaption><span>_new</span><a href="https://blog.csdn.net/m0_52669454/article/details/125888166">原博link</a></figcaption><table><tr><td class="code"><pre><span class="line">function Person(name, age) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">    <span class="keyword">this</span>.eating = function() &#123;</span><br><span class="line">        console.log(<span class="keyword">this</span>.name + <span class="string">&#x27; is eating&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p1 = new Person(<span class="string">&#x27;zs&#x27;</span>, <span class="number">12</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//----------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">/*实际JS引擎帮助我们实现的操作*/</span></span><br><span class="line"><span class="keyword">const</span> newObj = &#123;&#125;;</span><br><span class="line">newObj.__proto__ = Person.prototype;</span><br><span class="line"><span class="keyword">this</span> = newObj;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line"><span class="keyword">this</span>.eating = function() &#123;</span><br><span class="line">console.log(<span class="keyword">this</span>.name + <span class="string">&#x27; is eating&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> newObj;</span><br></pre></td></tr></table></figure></li>
</ol></div>

<h2 id="原型链中的this"><a href="#原型链中的this" class="headerlink" title="原型链中的this"></a>原型链中的this</h2><div class="note info"><p>this这个值在一个继承机制中，仍然是指向它原本属于的对象，而不是从原型链上找到它时，它所属于的对象。</p></div>

<h2 id="改变this指向方法-call-apply"><a href="#改变this指向方法-call-apply" class="headerlink" title="改变this指向方法 call() apply()"></a>改变this指向方法 call() apply()</h2><div class="note info"><h2 id="call和apply异同"><a href="#call和apply异同" class="headerlink" title="call和apply异同"></a>call和apply异同</h2><p>都可以调用&amp;执行函数，主要作用：修改函数指向的this（上下文对象），第一个参数是谁this就是谁！</p>
<ol>
<li>这两个方法都是<b>函数对象</b>的方法，需要通过<b>函数对象</b>来调用.</li>
<li>对函数调用<b>call() 和apply 都会调用函数执行</li>
</ol>
<ul>
<li>不传参数时候<code>fun.call()</code> <code> apply.call()</code> 调用的结果和 <code>fun()</code>一致</li>
</ul>
<ol start="3">
<li>在调用call()&#x2F;apply()时可以将一个对象指定为第一个参数，此时这个对象会成为函数执行时的this</li>
<li>不同：call()可以<b>直接将实参放在第一个参数对象后</b>依次传递，但apply()方法不可以直接传实参，需要将<b>实参封装到数组中统一传递</b></li>
<li>如果call() apply()不传参数 则this指window<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">   function <span class="function"><span class="title">fun</span><span class="params">(a,b)</span></span>&#123;</span><br><span class="line">       console.log(<span class="string">&quot;this.name=&quot;</span>+<span class="keyword">this</span>.name+<span class="string">&quot; a=&quot;</span>+a.name+<span class="string">&quot; b=&quot;</span>+b)</span><br><span class="line">   &#125;</span><br><span class="line">   let obj=&#123;</span><br><span class="line">       name:<span class="string">&quot;obj111&quot;</span></span><br><span class="line">   &#125;</span><br><span class="line">   let obj2=&#123;</span><br><span class="line">       name:<span class="string">&quot;obj222&quot;</span></span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   function fun1()&#123;</span><br><span class="line">        console.log(<span class="string">&quot;name=&quot;</span>+<span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line">fun1.apply(); <span class="comment">//name=varname  fun1.apply();效果等同于fun1()</span></span><br><span class="line">   </span><br><span class="line">   <span class="comment">// 此处的this指向第一个参数obj，实参直接传递依次赋值。</span></span><br><span class="line">   <span class="keyword">fun</span>.call(obj,obj2,<span class="number">3</span>)   <span class="comment">// this.name=obj111 a=obj222 b=3</span></span><br><span class="line">   </span><br><span class="line">   <span class="comment">// 此处的this指向第一个参数obj2,实参以数组形式传递</span></span><br><span class="line">   <span class="keyword">fun</span>.apply(obj2,[obj1,<span class="number">3</span>]) <span class="comment">// this.name=obj222 a=obj111 b=3</span></span><br></pre></td></tr></table></figure></li>
</ol></div>

<h2 id="枚举对象属性"><a href="#枚举对象属性" class="headerlink" title="枚举对象属性"></a>枚举对象属性</h2><div class="note info"><p>注意：<b style="color:red;">用.的方式不能使用变量。</b>所以只能obj[key] 方式取值  中括号可以传变量<br>&#x2F;&#x2F;obj.key是拿不到对应的值的因为这里表示去obj里找名为key的属性。这里的key不是key赋值后的变量值而只是变量名！  </p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">for</span><span class="params">(var key in obj)</span></span>&#123;</span><br><span class="line">    obj<span class="selector-attr">[key]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>function</tag>
      </tags>
  </entry>
  <entry>
    <title>作用域&amp;闭包</title>
    <url>/2023/03/04/JavaScript/scope/</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>归纳总结：作用域&#x2F;垃圾回收机制&#x2F;闭包 </p>
</blockquote>
<span id="more"></span>

<h1 id="作用域-Scope"><a href="#作用域-Scope" class="headerlink" title="作用域 Scope"></a>作用域 Scope</h1><div class="note info"><ol>
<li>一个变量的作用范围.</li>
<li>js中一共两种作用域：<mark>全局作用域</mark> 和 <mark>函数作用域</mark></li>
</ol></div>

<h1 id="全局作用域"><a href="#全局作用域" class="headerlink" title="全局作用域"></a>全局作用域</h1><div class="note info"><ol>
<li>直接编写在script标签中的js代码，都在全局作用域。</li>
<li>全局作用域在<mark>页面打开时创建</mark>，在<mark>页面关闭时候销毁</mark>。</li>
<li>在全局作用域中有个<b>全局对象window</b>。<blockquote>
<p>代表一个浏览器的窗口，它由浏览器创建,可以直接使用。</p>
</blockquote>
</li>
<li>在全局作用域中</li>
</ol>
<ul>
<li><b>创建的变量都会作为window的属性保存。</b></li>
<li><b>创建的函数也会作为window的方法保存。</b></li>
</ul>
<figure class="highlight arcade"><figcaption><span>全局变量和函数存在window对象里</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a =<span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(window.a) <span class="comment">// 10</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&quot;fn&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">window.fn() <span class="comment">// fn</span></span><br></pre></td></tr></table></figure>

<h2 id="变量的声明提前以及函数的声明提前"><a href="#变量的声明提前以及函数的声明提前" class="headerlink" title="变量的声明提前以及函数的声明提前"></a>变量的声明提前以及函数的声明提前</h2><br>
<div class="note "><h4 style="color:black;">变量的声明提前：</h4>

<p>使用var关键字声明的变量会在所有代码执行之前执行<br><mark>但不会赋值，直到执行到赋值语句时候才赋值</mark>）。（预编译&#x2F;预处理</p>
<figure class="highlight awk"><figcaption><span>变量声明提前</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="regexp">//</span>声明提前但是赋值不提前。</span><br><span class="line"><span class="regexp">//</span>所以a变量存在但是还没赋值。</span><br><span class="line">console.log(a);  <span class="regexp">//</span> <span class="string">&quot;undefined&quot;</span></span><br><span class="line"><span class="regexp">//</span>执行到这条赋值语句时候才正式赋值。</span><br><span class="line">var a = <span class="number">10</span>;</span><br></pre></td></tr></table></figure>

<h4 style="color:black;">函数的声明提前：</h4>

<p>1.使用函数声明形式创建的函数 function 函数(){},会在所有的代码执行之前就被创建。<br>2.和变量提前不同的是：<mark>函数不仅是声明提前，它是<b>整个函数都提前(包括函数里面的执行语句)</b>所以可以正常运行。</mark><br>3.所以<mark>可以在函数声明前调用函数</mark>。 （例子里的fun）<br>4. <b style="color:red;">注意</b>使用函数表达式创建的函数（var fun &#x3D; function(){}），只声明提前,赋值不会提前，所以不能在声明前调用。（例子里的fun2！！）</p></div>
<figure class="highlight arcade"><figcaption><span>函数声明提前</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">fun();   <span class="comment">// fun函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//因为全局变量fun2只声明提前，赋值不提前。</span></span><br><span class="line"><span class="comment">//此时还没赋值所以不能正常调用。</span></span><br><span class="line">fun2();  <span class="comment">// undefined is not a function</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//var 声明的变量所以变量有。</span></span><br><span class="line"><span class="comment">//但是还没执行到赋值语句所以是undefined</span></span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(fun2) <span class="comment">// &quot;undefined&quot;  </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&#x27;fun函数&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行到这里时候才赋值，赋值完后fun2才是一个函数对象才可以正常调用。</span></span><br><span class="line"><span class="keyword">var</span> fun2 = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&#x27;fun2&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="函数作用域"><a href="#函数作用域" class="headerlink" title="函数作用域"></a>函数作用域</h1><div class="note primary"><ol>
<li><p><mark>调用函数时</mark>创建函数作用域，<mark>函数执行完毕后</mark>，函数作用域销毁</p>
</li>
<li><p>每调用一次函数就会创建一个新的函数作用域，他们之间<b>互相独立</b>。</p>
</li>
<li><p>函数作用域里可以访问到全局作用域的变量,在全局作用域中无法访问到函数作用域的变量。（<b>函数可访全局，全局无法访函数里变量</b></p>
</li>
<li><p>（<mark>就近原则</mark>）当在函数作用域中操作一个变量时，它会<mark>先在自身作用域中查找</mark>，如果有则直接使用，如果没有则向上一级作用域中寻找,<b>直到找到全局作用域</b>。如果全局里也没有则<mark>报(引用异常)ReferenceError</mark>：is not defined。</p>
<figure class="highlight kotlin"><figcaption><span>3-4点栗子</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a =<span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> c = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">function <span class="function"><span class="title">fun</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> c = <span class="string">&quot;函数里的c&quot;</span></span><br><span class="line">    <span class="keyword">var</span> b = <span class="number">20</span>;</span><br><span class="line">    console.log(<span class="string">&quot;a= &quot;</span>+a+<span class="string">&quot;,c=&quot;</span>+);  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//先在自身作用域找a和c如果有则直接用。</span></span><br><span class="line"><span class="comment">//自身作用域找不到a ，去外层找a找到全局里的a</span></span><br><span class="line"><span class="function"><span class="title">fun</span><span class="params">()</span></span>;<span class="comment">//a= 10,c= 函数里的c</span></span><br><span class="line">console.log(<span class="string">&quot;c=&quot;</span>+c) <span class="comment">// c=10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在全局作用域中无法访问到函数作用域的变量b</span></span><br><span class="line">console.log(<span class="string">&quot;b=&quot;</span>+b);  <span class="comment">//b is not defined</span></span><br></pre></td></tr></table></figure></li>
<li><p>如果<mark>想在函数里访问全局的变量直接变量名前缀加上window。</mark>全局变量保存在window上.</p>
</li>
<li><p><mark>函数作用域中也有变量和函数声明提前的特性。</mark></p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun3</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.<span class="built_in">log</span>(a); </span><br><span class="line"></span><br><span class="line">    <span class="comment">//函数声明提前依旧生效</span></span><br><span class="line">    fun4()  <span class="comment">//我是函数4</span></span><br><span class="line">    <span class="keyword">var</span> a =<span class="number">35</span>;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fun4</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&quot;我是函数4&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 因为变量声明提升导致函数内部存在a变量,</span></span><br><span class="line"><span class="comment">//所以不需要去上一层找a.</span></span><br><span class="line"><span class="comment">//但是由于赋值不提升所以调用时候还没有赋值</span></span><br><span class="line"><span class="comment">//所以此时a是undefined</span></span><br><span class="line">fun3() <span class="comment">//&quot;undefined&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><mark>在函数中不使用var声明的变量都会自动成为<b>全局变量</b>。</mark></p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> d =<span class="number">33</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun5</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//执行到这时，没有d 去上一级找，找到全局的d</span></span><br><span class="line">    <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&quot;d= &quot;</span>+d);</span><br><span class="line">    <span class="comment">//重新给全局的d赋值。 全局的d的值这时候已经被改变成10</span></span><br><span class="line">    d = <span class="number">10</span>;</span><br><span class="line">    <span class="comment">//此处name没写var 所以变成了全局变量name </span></span><br><span class="line">    <span class="comment">//即window.name</span></span><br><span class="line">    name = <span class="string">&quot;piero&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&quot;d=&quot;</span>+d); <span class="comment">//d=10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//因为没用var声明 所以相当于window.name</span></span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(name)  <span class="comment">//piero</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><b>定义形参相当于在函数作用域中声明了变量</b></p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">23</span>;</span><br><span class="line">function <span class="function"><span class="title">fun</span><span class="params">(age)</span></span>&#123;</span><br><span class="line"><span class="comment">//定义了形参相当于在函数中加了 var age;</span></span><br><span class="line">    console.log(age);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 没有传实参  </span></span><br><span class="line"><span class="comment">//因为定义了形参所以函数作用域中有age，直接用了函数作用域了的age没有全局的。</span></span><br><span class="line"><span class="comment">// 但是因为没传实参，所以函数作用域里的age没能赋值所以是undefined</span></span><br><span class="line"><span class="function"><span class="title">fun</span><span class="params">()</span></span>;  <span class="comment">//&quot;undefined&quot;</span></span><br></pre></td></tr></table></figure></li>
</ol></div>

<h1 id="垃圾回收机制"><a href="#垃圾回收机制" class="headerlink" title="垃圾回收机制"></a>垃圾回收机制</h1><div class="note info"><h2 id="内存的生命周期"><a href="#内存的生命周期" class="headerlink" title="内存的生命周期"></a>内存的生命周期</h2><ol>
<li><mark>内存分配</mark>:当我们声明变量、函数、对象的时候，系统会自动为他们分配内存。</li>
<li><mark>内存使用</mark>：即读写内存，也就是使用变量、函数等。</li>
<li><mark>内存回收</mark>：使用完毕，由垃圾回收器自动回收不再使用的内存。<blockquote>
<p>一般情况下局部变量的值,不用了,会被自动回收掉。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 为变量分配内存</span></span><br><span class="line"><span class="keyword">const</span> age = <span class="number">18</span>;</span><br><span class="line"><span class="comment">// 为对象分配内存</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">age</span>:<span class="number">19</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 为函数分配内存</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> age = <span class="number">18</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(age)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="内存泄漏"><a href="#内存泄漏" class="headerlink" title="内存泄漏"></a>内存泄漏</h2><div class="note "><p>程序中分配的内存由于某种原因程序<b>未释放或无法释放</b>叫做内存泄漏。<br><mark>堆栈空间分配区别：</mark></p>
<ol>
<li>栈（操作系统》∶由操作系统自动分配释放函数的参数值、局部变量等，<b>基本数据类型放到栈里面</b>。</li>
<li>堆（操作系统）︰一般由程序员分配释放，若程序员不释放，由垃圾回收机制回收。<b>复杂数据类型放到堆里面</b>。</li>
</ol></div>

<h2 id="引用计数法和标记清除法"><a href="#引用计数法和标记清除法" class="headerlink" title="引用计数法和标记清除法"></a>引用计数法和标记清除法</h2><div class="note "><p>两种常见的浏览器垃圾回收算法</p>
<h3 id="引用计数"><a href="#引用计数" class="headerlink" title="引用计数"></a>引用计数</h3><div class="note "><p>IE采用的引用计数算法,定义“内存不再使用”，就是<mark>看一个对象是否有指向它的引用，没有引用了就回收</mark>对象算法;<br>流程：<br>1．跟踪记录被引用的次数<br>2.如果被引用了一次，那么就记录次数1,多次引用会累加 ++<br>3.如果减少一个引用就减1  –<br>4.如果引用次数是0，则释放内存</p>
<p>存在一个致命问题：<mark>嵌套引用（循环引用。</mark><br>如果两个对象相互引用，尽管他们已经不再使用，垃圾回收器不会进行回收（因为引用次数不可能为0），导致内存泄漏<br><img src="/images/ljhs.png"><br>如果这样的情况很多会导致大量内存泄漏。</p></div>

<h3 id="标记清除"><a href="#标记清除" class="headerlink" title="标记清除"></a>标记清除</h3><div class="note "><p>核心：<mark>从根部扫描对象，能查找到的就是使用的</mark>，找不到的就要回收<br>当根部访问不到时候会进行自动清除，所以内部怎么互相引用都不影响。</p>
<p>上面引用计数的图里的循环引用中，根部找不到o1和o2所以可以回收（因为是局部作用域外面访问不到）。 </p></div></div></div>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>作用域</tag>
        <tag>闭包</tag>
      </tags>
  </entry>
  <entry>
    <title>事件</title>
    <url>/2023/03/05/JavaScript/event/</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>归纳总结：事件流、事件委托、阻止默认行为、其他事件(页面加载，滚动事件)</p>
</blockquote>
<span id="more"></span>

<h1 id="事件流"><a href="#事件流" class="headerlink" title="事件流"></a>事件流</h1><div class="note info"><ol>
<li>事件流是指事件完整执行过程中的流动路径<br><img src="/images/event1.png"></li>
<li>事件流有两个阶段：<mark>事件捕获</mark>和<mark>事件冒泡</mark></li>
</ol>
<h2 id="事件捕获-从外到里"><a href="#事件捕获-从外到里" class="headerlink" title="事件捕获 (从外到里)"></a>事件捕获 (从外到里)</h2><ol>
<li>从Dom根元素开始去执行对应的事件（从外到里</li>
<li>语法<code>DOM。addEventListener(事件类型，事件处理函数（回调函数），[是否使用捕获机制])</code>  第三个参数可选,<mark>默认false即默认是冒泡</mark></li>
</ol>
<ul>
<li>注意第二个参数回调函数传的是函数名<b style="color:red">不要加()</b>,不是执行。 匿名函数时候才有()  因为匿名函数执行是(function(){})()</li>
</ul>
<ol start="3">
<li><mark><b>L0事件箭头只有冒泡阶段没有捕获</b></mark>  <code>btn.onclick=function(){}</code></li>
<li><mark>IE浏览器只支持冒泡，不支持捕获</mark>。W3C浏览器先执行捕获，后执行冒泡?<figure class="highlight oxygene"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span><span class="params">()</span><span class="comment">&#123;&#125;</span></span><br><span class="line">//注意第二个参数回调函数传的是函数名不要加<span class="params">()</span>,不是执行。</span><br><span class="line"><span class="title function_">dom</span>.<span class="title function_">addEventListener</span><span class="params">(<span class="string">&#x27;click&#x27;</span>,fn,<span class="keyword">true</span>)</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="事件冒泡-从里到外"><a href="#事件冒泡-从里到外" class="headerlink" title="事件冒泡 (从里到外)"></a>事件冒泡 (从里到外)</h2><ol>
<li>当一个元素的事件被触发时，<mark>同样的事件</mark>将会在该元素的<b>所有祖先元素中依次被触发</b>。这一过程即事件冒泡。</li>
<li>当一个元素触发事件后，会<mark>依次向上调用所有父级元素的同名事件。</mark></li>
<li>L2事件监听第三个参数false，默认都是冒泡<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">&quot;outer&quot;</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"><span class="keyword">const</span> outer = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.outer&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> inner = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.inner&#x27;</span>)</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我是最外层，整个页面&quot;</span>)&#125;)</span><br><span class="line">outer.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我是外层outer&quot;</span>)&#125;)</span><br><span class="line">inner.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我是最里层inner&quot;</span>)&#125;)</span><br><span class="line"><span class="comment">//当点击inner的div时候， 从里到外依次执行同名事件</span></span><br><span class="line"><span class="comment">// 打印结果&amp;顺序如下</span></span><br><span class="line"><span class="comment">// 我是最里层inner at test/js.html:31</span></span><br><span class="line"><span class="comment">// 我是外层outer at test/js.html:30</span></span><br><span class="line"><span class="comment">// 我是最外层，整个页面 at test/js.html:29</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="阻止冒泡"><a href="#阻止冒泡" class="headerlink" title="阻止冒泡"></a>阻止冒泡</h3><ol>
<li>如果想把事件限制在当前元素，不希望往外冒泡触发父级元素同名事件就需要阻止事件冒泡。</li>
<li>方法：调用事件对象even的<code>stopPropagation</code>方法 ，<mark>该方法可以阻止事件流动传播，即对捕获阶段也生效。</mark><blockquote>
<p>回调函数第一个参数就是事件对象e</p>
</blockquote>
<figure class="highlight javascript"><figcaption><span>阻止冒泡事件</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">&quot;outer&quot;</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"><span class="keyword">const</span> outer = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.outer&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> inner = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.inner&#x27;</span>)</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我是最外层，整个页面&quot;</span>)&#125;)</span><br><span class="line">outer.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我是外层outer&quot;</span>)&#125;)</span><br><span class="line">inner.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我是最里层inner&quot;</span>)</span><br><span class="line">    <span class="comment">//阻止流动传播</span></span><br><span class="line">    e.<span class="title function_">stopPropagation</span>()</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 此时点击inner的div只打印 我是最里层inner</span></span><br><span class="line"><span class="comment">// outer document的同名事件都被阻止了不执行。</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="解绑事件"><a href="#解绑事件" class="headerlink" title="解绑事件"></a>解绑事件</h2><ol>
<li>on事件：<mark>直接使用null覆盖</mark>。</li>
<li>解绑语句的位置慎重！</li>
</ol>
<ul>
<li>如果放在绑定里面则会先执行然后马上解绑 <mark>能实现事件只执行一次。</mark></li>
<li>如果放在绑定语句后面，则 <mark>可能不会执行事件处理 </mark>，因为已经往下执行到解绑了，已经解绑。<figure class="highlight awk"><figcaption><span>L0解绑</span></figcaption><table><tr><td class="code"><pre><span class="line">btn.onclick = <span class="keyword">function</span>()&#123;</span><br><span class="line">    alert(<span class="string">&quot;点击了&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="regexp">//</span>用空对象null去覆盖事件对象实现解绑</span><br><span class="line"><span class="regexp">//</span> 此时 点击按钮btn一次都不会弹框，因为js往下执行直接解绑了。</span><br><span class="line">btn.onclick = null </span><br><span class="line"><span class="regexp">//</span>但如果是这样。</span><br><span class="line"><span class="regexp">//</span>此时点击了btn2后会弹窗显示<span class="string">&quot;点击了&quot;</span>,然后马上执行解绑，</span><br><span class="line"><span class="regexp">//</span>即第二次再点击时候事件已经被解绑指向null不会再弹框</span><br><span class="line"><span class="regexp">//</span>可以事件事件只执行一次！！！</span><br><span class="line">btn2.onclick = <span class="keyword">function</span>()&#123;</span><br><span class="line">    alert(<span class="string">&quot;点击了&quot;</span>);</span><br><span class="line">    btn2.onclick = null </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<ol start="2">
<li>addEventListener方式：调用<code>removeEventListener(事件类型，事件处理函数，[获取阶段或者冒泡阶段])</code><blockquote>
<p><b><mark>匿名函数无法解绑</mark>，所以第二个参数不能使用匿名形式，得单独拿出来！！</b></p>
</blockquote>
<figure class="highlight reasonml"><figcaption><span>L2解绑</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> fn<span class="literal">()</span>&#123;</span><br><span class="line">    alert(<span class="string">&quot;点击了&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 绑定</span></span><br><span class="line">btn.add<span class="constructor">EventListener(&#x27;<span class="params">click</span>&#x27;,<span class="params">function</span>()</span>&#123;&#125;)</span><br><span class="line"><span class="comment">// 解绑</span></span><br><span class="line">btn.remove<span class="constructor">EventListener(&#x27;<span class="params">click</span>&#x27;,<span class="params">fn</span>)</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="两种注册事件L0-和-L2的区别"><a href="#两种注册事件L0-和-L2的区别" class="headerlink" title="两种注册事件L0 和 L2的区别"></a>两种注册事件L0 和 L2的区别</h2><div class="note "><h3 id="传统on注册-L0"><a href="#传统on注册-L0" class="headerlink" title="传统on注册(L0)"></a>传统on注册(L0)</h3><ol>
<li>同一个对象,后面注册的事件<b>会覆盖</b>前面注册(同一个事件类型&#x2F;比如同click) &#x2F;&#x2F;最多只能存在一个同类</li>
<li>直接使用null覆盖但就可以实现事件的解绑</li>
<li>都是冒泡阶段执行的，L0没有捕获阶段</li>
</ol>
<h3 id="事件监听注册-L2"><a href="#事件监听注册-L2" class="headerlink" title="事件监听注册(L2)"></a>事件监听注册(L2)</h3><ol>
<li><code>addEventListener(事件炎型,事件处理函数,是否使用捕获)</code></li>
<li>后面注册的事件<b>不会覆盖</b>前面注册的事件(同一个事件),即<b><mark>可以绑定多个同名事件且他们都会被执行！！</mark></b></li>
<li>可以通过第三个参数去确定是在冒泡或者捕获阶段执行。默认false 即冒泡</li>
<li>必须使用<code>remoweEventListener(事件类型。事件处理函数,获取描获或者冒泡阶段)</code></li>
<li>匿名函数无法被解绑，所以<mark>L2解绑时事件处理函数要单独拿出来</mark>。</li>
</ol></div>


<h2 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h2><blockquote>
<p>是用事件流的特征解决一些开发需求的技巧。</p>
</blockquote>
<ol>
<li>优点：减少注册次数，可以提高程序性能</li>
<li>主要利用：事件冒泡特点</li>
<li>给父元素绑定事件。当触发子元素时候，会<b>冒泡并触发父元素同名事件</b>上。</li>
</ol>
<ul>
<li>比如给ul绑定点击事件，当点击ul里某个li时候会触发ul的点击事件，因此可以再里面对多个li同时做一些操作而不用对每个li都绑监听。</li>
</ul>
<ol start="4">
<li>可以通过 事件对象.target.tagName 来获得真正触发事件的那个元素。<br><mark>console.dir(e.target)可以打印对象信息！</mark><br><img src="/images/event2.png"><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//html</span></span><br><span class="line">&lt;ul&gt;<span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>1点击变红<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>2点击变红<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>3点击变红<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>点击不变色<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>&lt;/ul&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//js</span></span><br><span class="line"><span class="keyword">const</span> ul = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;ul&#x27;</span>)</span><br><span class="line">ul.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">    <span class="comment">// console.dir(e.target) //我们点击的那个对象</span></span><br><span class="line">    <span class="comment">// 只在点击li时候变色，点p不变</span></span><br><span class="line">    <span class="keyword">if</span>(e.<span class="property">target</span>.<span class="property">tagName</span>===<span class="string">&#x27;li&#x27;</span>)&#123;</span><br><span class="line">         e.<span class="property">target</span>.<span class="property">style</span>.<span class="property">color</span> = <span class="string">&quot;red&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ol></div>

<h2 id="阻止默认行为"><a href="#阻止默认行为" class="headerlink" title="阻止默认行为"></a>阻止默认行为</h2><div class="note info"><p>待补充完善</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">const <span class="selector-tag">form</span> = document<span class="selector-class">.querySelector</span>(<span class="string">&#x27;form&#x27;</span>)</span><br><span class="line"><span class="selector-tag">form</span><span class="selector-class">.addEventListener</span>(<span class="string">&#x27;submit&#x27;</span>,<span class="built_in">function</span>(e)&#123;</span><br><span class="line">    <span class="comment">//阻止默认提交</span></span><br><span class="line">    e<span class="selector-class">.preventDefault</span>()</span><br><span class="line">&#125;)</span><br><span class="line">const <span class="selector-tag">a</span> = document<span class="selector-class">.querySelector</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="built_in">function</span>(e)&#123;</span><br><span class="line">    <span class="comment">//阻止a标签默认点击跳转事件</span></span><br><span class="line">    e<span class="selector-class">.preventDefault</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>

<h1 id="其他事件mark"><a href="#其他事件mark" class="headerlink" title="其他事件mark"></a>其他事件mark</h1><blockquote>
<p>持续完善<br>鼠标经过离开 &#x2F; 页面加载事件 &#x2F; 滚动事件 &#x2F; 页面尺寸？</p>
</blockquote>
<div class="note info"><h2 id="鼠标经过和离开"><a href="#鼠标经过和离开" class="headerlink" title="鼠标经过和离开"></a>鼠标经过和离开</h2><h3 id="1-mouseover-鼠标经过-和-mouseout-鼠标离开"><a href="#1-mouseover-鼠标经过-和-mouseout-鼠标离开" class="headerlink" title="1.mouseover 鼠标经过 和 mouseout 鼠标离开"></a>1.<code>mouseover</code> 鼠标经过 和 <code>mouseout</code> 鼠标离开</h3><div class="note "><p>存在冒泡现象<br>example：下面代码中。当鼠标从outer进入到innder 运行结果：<br>鼠标经过 鼠标离开 鼠标经过<br>运行结果与理想不太符合是因为：<br>1.当鼠标进入outer时，会触发outer的”鼠标经过”，<br>2.当鼠标进入子元素inner时候,此时鼠标已经离开outer所以会执行outer的”鼠标离开”，<br>但这时候鼠标进入了子元素inner，所以会从inner开始冒泡查找鼠标经过事件。<br>子元素没有鼠标经过事件但是冒泡到父元素outer时发现outer有于是执行了outer的”鼠标经过”。<br><mark>故而多打了印了一次鼠标经过，这是由于冒泡导致的异常!</mark></p></div>
<figure class="highlight javascript"><figcaption><span>mouseover&mouseout</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">&quot;outer&quot;</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//js</span></span><br><span class="line"><span class="keyword">const</span> outer = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;outer&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> inner = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;inner&#x27;</span>)</span><br><span class="line">outer.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseover&#x27;</span>,<span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;鼠标经过&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">outer.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseout&#x27;</span>,<span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;鼠标离开&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2-mouseenter-和-mouseleave"><a href="#2-mouseenter-和-mouseleave" class="headerlink" title="2.mouseenter 和 mouseleave"></a>2.<code>mouseenter</code> 和 <code>mouseleave</code></h3><blockquote>
<p>不存在冒泡现象，推荐！！<br>鼠标从outer移动到inner，运行结果：鼠标经过</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">&quot;outer&quot;</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//js</span></span><br><span class="line"><span class="keyword">const</span> outer = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;outer&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> inner = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;inner&#x27;</span>)</span><br><span class="line">outer.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseenter&#x27;</span>,<span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;鼠标经过&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">outer.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseleave&#x27;</span>,<span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;鼠标离开&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="页面加载-load-amp-DOMContentLoaded"><a href="#页面加载-load-amp-DOMContentLoaded" class="headerlink" title="页面加载 load &amp; DOMContentLoaded"></a>页面加载 load &amp; DOMContentLoaded</h2><div class="note "><h3 id="load-外部资源全部加载完毕"><a href="#load-外部资源全部加载完毕" class="headerlink" title="load 外部资源全部加载完毕"></a>load 外部资源全部加载完毕</h3><ol>
<li>加载外部资源〔如图片、外联CSS和JavaScript等）加载完毕时触发的事件</li>
<li>使用情况：</li>
</ol>
<ul>
<li>有些时候需要等页面资源全部处理完了再做一些事情。</li>
<li>老代码喜欢script写在头部，代码从上往下执行。这时候直接找dom元素容易找不到</li>
</ul>
<ol start="3">
<li>事件名: load  ：监听页面所有资源加载完毕<blockquote>
<p><b>注意:不光可以监听整个页面资源加载完毕，也可以针对某个资源绑定load事件.</b></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;load&quot;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="comment">//执行..&#125;)</span></span><br><span class="line">img.<span class="title function_">addEventListener</span>(<span class="string">&quot;load&quot;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;)</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="DOMContentLoaded-监听页面DOM加裁完毕"><a href="#DOMContentLoaded-监听页面DOM加裁完毕" class="headerlink" title="DOMContentLoaded 监听页面DOM加裁完毕"></a>DOMContentLoaded 监听页面DOM加裁完毕</h3><ol>
<li>当初始的HTML文档被完全加载和解析完成之后，DOMContentLoaded事件被触发，而无需等待样式表、图像等完全加载。(即dom结构加载完就开始执行)</li>
<li>给document添加DOMContentLoaded事件<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;DOMContentLoaded&quot;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//执行...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ol></div>

<h2 id="滚动事件-scroll"><a href="#滚动事件-scroll" class="headerlink" title="滚动事件 scroll"></a>滚动事件 scroll</h2><blockquote>
<p>获取html document.documentElement  —html对象<br>document.documentElement.scrollTop 可以拿到整个页面向上滚动了多少px</p>
</blockquote>
<div class="note "><ol>
<li>scrollTop &#x2F; scrollLeft 可以拿到被卷去距离（滚动的距离。</li>
</ol>
<ul>
<li><b>返回值是不带单位的数值</b></li>
<li><b>可读写</b>。可以通过修改值来设置一开始默认处在的位置。</li>
</ul>
<ol start="2">
<li>判断语句<mark>用大于等于最稳妥</mark> 因为可能会有小数点。</li>
<li>场景：导航栏常用。控制显隐藏 定位等。<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">const <span class="selector-tag">div</span> = document<span class="selector-class">.querySelector</span>(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">window<span class="selector-class">.addEventListener</span>(<span class="string">&quot;scroll&quot;</span>,<span class="built_in">function</span>()&#123;</span><br><span class="line">    <span class="comment">// 被卷去距离 scrollTop  scrollLeft</span></span><br><span class="line">    const n = document<span class="selector-class">.documentElement</span><span class="selector-class">.scrollTop</span></span><br><span class="line">    <span class="comment">//用大于等于最稳妥 因为可能会有小数点</span></span><br><span class="line">    <span class="comment">//滚动距离大于等于100时候 显示否则隐藏 </span></span><br><span class="line">    <span class="built_in">if</span>(n&gt;=<span class="number">100</span>)&#123;</span><br><span class="line">        <span class="selector-tag">div</span><span class="selector-class">.style</span><span class="selector-class">.display</span> = <span class="string">&#x27;block&#x27;</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="selector-tag">div</span><span class="selector-class">.style</span><span class="selector-class">.display</span> = <span class="string">&#x27;none&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="获取元素位置"><a href="#获取元素位置" class="headerlink" title="获取元素位置"></a>获取元素位置</h2><blockquote>
<p>补充： 持续ing</p>
</blockquote>
<ol>
<li><p>通过元素的offsetLeft和offsetTop</p>
<blockquote>
<p>dom元素的offsetLeft、offsetTop指的是元素相对于其offseParent指定的坐标来说的。<br>注意：当前元素为fixed时，其offsetParent的值为null<br>offsetWidth&#x2F;offsetHeight: width+padding+borderclientLeft&#x2F;clientTop;</p>
</blockquote>
</li>
<li><p>event.clientX和event.clientY</p>
<blockquote>
<p>事件相对于文档的水平和垂直距离</p>
</blockquote>
</li>
<li><p>getBoundingClientRect</p>
<blockquote>
<p>方法返回一个一个矩形对象，包含四个属性：left、top、right和bottom。分别表示元素各边与页面上边和左边的距离</p>
</blockquote>
</li>
<li><p>window.screen.availHeight&#x2F;window.screen.availWidth: 浏览器去除上方工具栏和下放菜单栏可用宽高</p>
</li>
<li><p>window.screen.height&#x2F;window.screen.width: 屏幕宽高</p>
</li>
</ol></div></div>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>事件流</tag>
        <tag>常用事件</tag>
      </tags>
  </entry>
  <entry>
    <title>Aframe使用记录</title>
    <url>/2023/03/07/Otheres/Aframe/</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>个人使用记录：关于aframe </p>
</blockquote>
<span id="more"></span>

<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><div class="note info"><p>A-Frame 是一个用来构建虚拟现实（VR）应用的网页开发框架。<br>A-Frame 基于强大的three.js 框架, 同时提供声明式、组件化、可复用的实体组件（entity-component）结构</p></div>

<h1 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h1><div class="note info"><p><a href="https://aframe.io/examples/showcase/sky/">360°Image</a><br>打开任意的A-Frame场景，敲击<kbd> ctrl </kbd>  + <kbd> alt </kbd> + <kbd> i </kbd> 组合键，将切换到3D元素检测模式</p>
<ol>
<li>首先引入js <code>&lt;script src=&quot;https://aframe.io/releases/1.0.4/aframe.min.js&quot;&gt;&lt;/script&gt;</code></li>
<li><code>&lt;a-scene&gt;&lt;/a-scene&gt;</code>一个场景</li>
</ol></div>
<figure class="highlight xml"><figcaption><span>栗子</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 定义一个场景 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a-scene</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 存放资源，图片音频等 可用#定位资源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a-assets</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">&quot;bg&quot;</span> <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span> <span class="attr">src</span>=<span class="string">&quot;static/bg3.jpg&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">audio</span> <span class="attr">preload</span> <span class="attr">controls</span> <span class="attr">id</span>=<span class="string">&quot;sound&quot;</span> <span class="attr">visible</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;static/gold_3.mp3&quot;</span> <span class="attr">type</span>=<span class="string">&quot;audio/mpeg&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;static/gold_3.ogg&quot;</span> <span class="attr">type</span>=<span class="string">&quot;audio/ogg&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">&quot;arrow&quot;</span> <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span> <span class="attr">src</span>=<span class="string">&quot;static/arrow.png&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a-assets</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 360度背景 ，地址取上面--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a-sky</span> <span class="attr">src</span>=<span class="string">&quot;#bg&quot;</span> <span class="attr">radius</span>=<span class="string">&quot;15&quot;</span> <span class="attr">rotation</span>=<span class="string">&quot;2 0 -1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a-sky</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--添加class:link 与镜头绑定，当镜头移动到有link的元素时会触发点击事件</span></span><br><span class="line"><span class="comment">    (class名自定义 和镜头处raycaster: 一致即可) --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- position(xyz) rotation 旋转方向 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- visible控制显示隐藏，false是隐藏 可通过setAttribute(&#x27;visible&#x27;, &quot;true&quot;) 显示--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a-entity</span> <span class="attr">class</span>=<span class="string">&quot;blackboard_select&quot;</span> <span class="attr">position</span>=<span class="string">&quot;-2 2.5 -5&quot;</span> <span class="attr">rotation</span>=<span class="string">&quot;180 0 0&quot;</span> <span class="attr">visible</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">			<span class="attr">event-set__mouseenter</span>=<span class="string">&quot;scale: 1.2 1.2 1&quot;</span> <span class="attr">event-set__mouseleave</span>=<span class="string">&quot;scale: 1 1 1&quot;</span> <span class="attr">canvas-updater</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">a-image</span> <span class="attr">class</span>=<span class="string">&quot;link&quot;</span> <span class="attr">src</span>=<span class="string">&quot;#arrow&quot;</span> <span class="attr">width</span>=<span class="string">&quot;1.3&quot;</span> <span class="attr">height</span>=<span class="string">&quot;1.3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a-image</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">a-entity</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 镜头追踪 raycaster=&quot;objects: .link&quot; </span></span><br><span class="line"><span class="comment">    里面填需要绑定交互的选择器多个用逗号隔开 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a-entity</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a-entity</span> <span class="attr">camera</span> <span class="attr">look-controls</span> <span class="attr">wasd-controls</span> <span class="attr">id</span>=<span class="string">camera</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a-entity</span> <span class="attr">position</span>=<span class="string">&quot;0 0 -3&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">animation__click</span>=<span class="string">&quot;property: scale; startEvents: click; easing: easeInCubic; dur: 150; from: 1 1 1; to: 1 1 1&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">animation__fusing</span>=<span class="string">&quot;property: scale; startEvents: fusing; easing: easeInCubic; dur: 5500; from: 1 1 1; to: 10 10 10&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">animation__mouseleave</span>=<span class="string">&quot;property: scale; startEvents: mouseleave; easing: easeInCubic; dur: 500; to: 1 1 1&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">geometry</span>=<span class="string">&quot;primitive: ring; radiusInner: 0.02; radiusOuter: 0.03;&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">material</span>=<span class="string">&quot;color: black; shader: flat&quot;</span> <span class="attr">cursor</span>=<span class="string">&quot;maxDistance: 30; fuse: true; fuseTimeout:5500&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">raycaster</span>=<span class="string">&quot;objects: .link&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">a-entity</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">a-entity</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">a-entity</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a-scene</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://aframe.io/releases/1.0.4/aframe.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="360°背景"><a href="#360°背景" class="headerlink" title="360°背景"></a>360°背景</h2><div class="note info"><p>当sky设置了radius时 相当于<mark>限制了背景图里所有实体的position的值的大小</mark>.<br>比如下面radius设置为15时候，position最大为15.</p></div>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a-scene</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a-sky</span> <span class="attr">src</span>=<span class="string">&quot;#bg&quot;</span> <span class="attr">radius</span>=<span class="string">&quot;15&quot;</span> <span class="attr">rotation</span>=<span class="string">&quot;2 0 -1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a-sky</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a-scene</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="关于三维的位置"><a href="#关于三维的位置" class="headerlink" title="关于三维的位置"></a>关于三维的位置</h2><div class="note info"><p>依旧一知半解，x往左边是负右边是正所以左手边是 -5？大概吧。正前方旋转90度来到左边。右边同理？？<br>四个方位的参考值：</p>
<div class="note "><p><mark>正前方时即</mark>：position： 0 0 -5   rotaiton：0 0 0<br>position ： x 左正右负，y 上正下负 ，z 越大越近，但是好像只能负数阿不然看不见。<br>rotation ：0 0 0的基础上<br>第一个参数：上下翻转（正时候向前翻转，负的时候往后翻转）<br><img src="/images/rotation40.png"><br>第二个参数：左右翻转（正数时候：右手拇指向上时候四指收拢方向。）<br><img src="/images/rotation0400.png"><br>第三个参数：360°转，正数 逆时针方向，负数顺时针方向<br><img src="/images/rotation0040.png"></p></div>
<div class="note "><p><mark>左手边</mark>：position： -5 0 0   rotation：0 90 0<br>position： x：远近（越大越近，依旧负数） y：上下-上正下负（越大越上 z:左右-左正右负（越大越左<br>rotation：（0 90 0的基础上阿）<br>第一个参数：上下翻转：正往前翻转<br>第二个参数：左右翻转：右手拇指向上时候四指收拢方向<br>第三个参数：360°转，正数 逆时针</p></div>
<div class="note "><p><mark>右手边</mark>：position：  5 0 0   rotaiton：0 90 0<br>position： x：远近（越小越近，大于0） y：上下-上正下负（越大越上 z:左右-左正右负（越大越右<br>rotation：（0 90 0的基础上阿）<br>第一个参数：上下翻转：正往后翻转<br>第二个参数：左右翻转：右手拇指向上时候四指收拢方向<br>第三个参数：360°转，正数 顺时针</p></div>
<div class="note "><p><mark>后方</mark>： position    0 0 5   rotaiton：0 0 0<br>position： x：左右，正左右负 y：上下-上正下负（越大越上 z:远近：越小越近<br>rotation：（0 90 0的基础上阿）<br>第一个参数：上下翻转：正往后翻转<br>第二个参数：左右翻转：右手拇指向上时候四指收拢方向<br>第三个参数：360°转，正数 顺时针</p></div>

<div class="note info"><p>小结：<br>1.远近都是越接近0越近视野（图像越大，<mark>但是不能跨0</mark>，比如负的时候不能&gt;&#x3D;0,正的时候不能&lt;&#x3D;0。否则看不到图了<br>2.rotation的三个参数。都是上下 左右和360°。且左右翻转都是右手<br>3.上下翻转：前左的都是往前翻转，右后都是往后翻。<br>4.360°：前左是逆时针，右后是顺时针。<br>5.xyz：左右时候：远近上下左右 前后：左右上下远近。<br>6</p></div></div>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- ref 参考 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a-entity</span> <span class="attr">class</span>=<span class="string">&quot;ref&quot;</span> <span class="attr">position</span>=<span class="string">&quot;0 0 -5&quot;</span> <span class="attr">rotation</span>=<span class="string">&quot;0 0 0&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">canvas-updater</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a-image</span> <span class="attr">class</span>=<span class="string">&quot;link&quot;</span> <span class="attr">src</span>=<span class="string">&quot;#star&quot;</span> <span class="attr">position</span>=<span class="string">&quot;0 -0.2 0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;0.9&quot;</span> <span class="attr">height</span>=<span class="string">&quot;0.5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a-image</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a-image</span> <span class="attr">class</span>=<span class="string">&quot;arrow&quot;</span> <span class="attr">src</span>=<span class="string">&quot;#arrow&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">a-image</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a-image</span>  <span class="attr">class</span>=<span class="string">&quot;check&quot;</span> <span class="attr">src</span>=<span class="string">&quot;#correct&quot;</span> <span class="attr">position</span>=<span class="string">&quot;0 -0.2 0&quot;</span> <span class="attr">rotation</span>=<span class="string">&quot;0 0 0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;0.3&quot;</span> <span class="attr">height</span>=<span class="string">&quot;0.3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a-image</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a-entity</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h2 id="文本标签-a-text"><a href="#文本标签-a-text" class="headerlink" title="文本标签 a-text"></a>文本标签 a-text</h2><div class="note info"><ol>
<li>position位置</li>
<li>align 对齐方式 </li>
<li>wrap-count 字体大小，数值越大，字体越小。</li>
<li>value 显示的文本内容</li>
<li>font 字体</li>
</ol></div>
<figure class="highlight xml"><figcaption><span>字体</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a-text</span> <span class="attr">font</span>=<span class="string">&quot;kelsonsans&quot;</span> <span class="attr">color</span>=<span class="string">&quot;white&quot;</span> <span class="attr">align</span>=<span class="string">&quot;left&quot;</span> <span class="attr">baseline</span>=<span class="string">&quot;center&quot;</span> <span class="attr">position</span>=<span class="string">&quot;-1.2 -1 0&quot;</span> <span class="attr">wrap-count</span>=<span class="string">&quot;35&quot;</span> <span class="attr">value</span>=<span class="string">&quot;scissors&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a-text</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="cursor-光标-x2F-镜头追踪"><a href="#cursor-光标-x2F-镜头追踪" class="headerlink" title="cursor 光标&#x2F;镜头追踪"></a>cursor 光标&#x2F;镜头追踪</h2><div class="note info"><ol>
<li><mark>animation__fusing</mark> ：fusing 凝视时候(其实mouseenter&#x2F;mouseleave)的动画特效；<br><mark>animation__click</mark>：点击时候特效</li>
<li><mark>raycaster</mark> ：绑定需要交互的实体，通过实体上的选择器绑定（比如class id 栗子里是link。<br> <code>&lt;a-entity&gt;</code> 上加上同样的选择器时候,比如<code>&lt;a-entity class=&quot;link&quot;&gt;</code>，<br> 当光标移到这个实体时候就会触发凝视（mouseenter&#x2F;mouseleave）以及点击（click） 事件.</li>
</ol></div>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">&lt;a-entity&gt;</span></span><br><span class="line">    <span class="string">&lt;a-entity</span> <span class="string">camera</span> <span class="string">look-controls</span> <span class="string">wasd-controls</span> <span class="string">id=camera&gt;</span></span><br><span class="line">        <span class="string">&lt;a-entity</span> <span class="string">position=&quot;0</span> <span class="number">0</span> <span class="number">-3</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">            animation__click=&quot;</span><span class="attr">property:</span> <span class="string">scale;</span> <span class="attr">startEvents:</span> <span class="string">click;</span> <span class="attr">easing:</span> <span class="string">easeInCubic;</span> <span class="attr">dur:</span> <span class="number">150</span><span class="string">;</span> <span class="attr">from:</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span><span class="string">;</span> <span class="attr">to:</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">            animation__fusing=&quot;</span><span class="attr">property:</span> <span class="string">scale;</span> <span class="attr">startEvents:</span> <span class="string">fusing;</span> <span class="attr">easing:</span> <span class="string">easeInCubic;</span> <span class="attr">dur:</span> <span class="number">5500</span><span class="string">;</span> <span class="attr">from:</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span><span class="string">;</span> <span class="attr">to:</span> <span class="number">10</span> <span class="number">10</span> <span class="number">10</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">            animation__mouseleave=&quot;</span><span class="attr">property:</span> <span class="string">scale;</span> <span class="attr">startEvents:</span> <span class="string">mouseleave;</span> <span class="attr">easing:</span> <span class="string">easeInCubic;</span> <span class="attr">dur:</span> <span class="number">500</span><span class="string">;</span> <span class="attr">to:</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">            geometry=&quot;</span><span class="attr">primitive:</span> <span class="string">ring;</span> <span class="attr">radiusInner:</span> <span class="number">0.02</span><span class="string">;</span> <span class="attr">radiusOuter:</span> <span class="number">0.03</span><span class="string">;&quot;</span></span><br><span class="line">            <span class="string">material=&quot;color:</span> <span class="string">black;</span> <span class="attr">shader:</span> <span class="string">flat&quot;</span> <span class="string">cursor=&quot;maxDistance:</span> <span class="number">30</span><span class="string">;</span> <span class="attr">fuse:</span> <span class="literal">true</span><span class="string">;</span> <span class="string">fuseTimeout:5500&quot;</span></span><br><span class="line">            <span class="string">raycaster=&quot;objects:</span> <span class="string">.link&quot;&gt;</span></span><br><span class="line">        <span class="string">&lt;/a-entity&gt;</span></span><br><span class="line">    <span class="string">&lt;/a-entity&gt;</span></span><br><span class="line"><span class="string">&lt;/a-entity&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="注册组件？AFRAME-registerComponent（）"><a href="#注册组件？AFRAME-registerComponent（）" class="headerlink" title="注册组件？AFRAME.registerComponent（）"></a>注册组件？AFRAME.registerComponent（）</h2><div class="note info"><ol>
<li>获取元素可以用选择器。</li>
</ol></div>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;a-entity <span class="keyword">class</span>=<span class="string">&quot;start&quot;</span> start-btn position=<span class="string">&quot;1.5 1 -5&quot;</span> rotation=<span class="string">&quot;0 0 0&quot;</span> </span><br><span class="line">    event-set__mouseenter=<span class="string">&quot;scale: 1.2 1.2 1&quot;</span> event-set__mouseleave=<span class="string">&quot;scale: 1 1 1&quot;</span> canvas-updater&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">a-image</span> <span class="attr">class</span>=<span class="string">&quot;link&quot;</span> <span class="attr">src</span>=<span class="string">&quot;#start&quot;</span> <span class="attr">width</span>=<span class="string">&quot;.8&quot;</span> <span class="attr">height</span>=<span class="string">&quot;.8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a-image</span>&gt;</span></span></span><br><span class="line">&lt;/a-entity&gt;</span><br><span class="line"><span class="variable constant_">AFRAME</span>.<span class="title function_">registerComponent</span>(<span class="string">&#x27;start-btn&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">schema</span>: &#123;</span><br><span class="line">        <span class="attr">target</span>: &#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;selector&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">init</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> data = <span class="variable language_">this</span>.<span class="property">data</span>;</span><br><span class="line">        <span class="keyword">var</span> el = <span class="variable language_">this</span>.<span class="property">el</span>;</span><br><span class="line">        el.<span class="title function_">addEventListener</span>(<span class="string">&quot;mouseleave&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;   </span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);	</span><br></pre></td></tr></table></figure>

<h2 id="js方法"><a href="#js方法" class="headerlink" title="js方法"></a>js方法</h2><div class="note info"><ol>
<li>获取和修改属性 getAttribute() &#x2F; setAttribute(key,value) <figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">&lt;!-- 修改文本内容 --&gt;</span><br><span class="line">document.get<span class="constructor">ElementById(&#x27;<span class="params">res</span>-<span class="params">count</span>&#x27;)</span>.set<span class="constructor">Attribute(<span class="string">&quot;value&quot;</span>, <span class="string">&quot;Result(&quot;</span> + <span class="params">index</span> + <span class="string">&quot;/5)&quot;</span>)</span></span><br><span class="line"><span class="comment">// 修改图片地址</span></span><br><span class="line">dom.set<span class="constructor">Attribute(&#x27;<span class="params">src</span>&#x27;, <span class="string">&quot;#wrong&quot;</span>)</span></span><br><span class="line"><span class="comment">// 控制显示隐藏</span></span><br><span class="line">dom.set<span class="constructor">Attribute(&#x27;<span class="params">visible</span>&#x27;, <span class="string">&quot;true&quot;</span>)</span></span><br></pre></td></tr></table></figure></li>
<li>取消镜头交互，只需要移除对应的选择器就好。（比如例子里的是class <code>dom.classList.remove(&quot;link&quot;)</code></li>
<li>定时器，停留多少秒之后才触发某个动作<figure class="highlight reasonml"><figcaption><span>停留5s后触发点击事件</span></figcaption><table><tr><td class="code"><pre><span class="line">var answer_timer;</span><br><span class="line"><span class="comment">// 鼠标进入时</span></span><br><span class="line">el.add<span class="constructor">EventListener(&#x27;<span class="params">mouseenter</span>&#x27;,<span class="params">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 存在则先清除定时器，相当于重置（归0重新计时。</span></span><br><span class="line">    <span class="keyword">if</span> (answer_timer) &#123;</span><br><span class="line">        clear<span class="constructor">Timeout(<span class="params">answer_timer</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 开始定时 5s</span></span><br><span class="line">    answer_timer = set<span class="constructor">Timeout(<span class="params">function</span>()</span> &#123;  </span><br><span class="line">        <span class="comment">//do something</span></span><br><span class="line">    &#125;, <span class="number">5000</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 鼠标离开时</span></span><br><span class="line">el.add<span class="constructor">EventListener(&#x27;<span class="params">mouseleave</span>&#x27;, <span class="params">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 离开时候清除定时器。</span></span><br><span class="line"> <span class="keyword">if</span> (answer_timer) &#123;</span><br><span class="line">        clear<span class="constructor">Timeout(<span class="params">answer_timer</span>)</span>;</span><br><span class="line">        answer_timer = null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol></div>

<h1 id="一些用到的js记录"><a href="#一些用到的js记录" class="headerlink" title="一些用到的js记录"></a>一些用到的js记录</h1><div class="note info"><ol>
<li>获取子元素 <code>dom.children[0]</code></li>
<li>与class有关的：</li>
</ol>
<ul>
<li>获取类名 <code>dom.className</code></li>
<li>移除类 <code>dom.classList.remove(&quot;link&quot;)</code></li>
<li>判断是否含有某class <code>dom.classList.contains(&#39;link&#39;)</code></li>
</ul>
<ol start="3">
<li>找父节点 dom.parentNode :隐藏父节点<br> <code>this.parentNode.style.display =&#39;none&#39;</code></li>
</ol>
<ul>
<li>nextSibling下一个兄弟</li>
<li>previousSibling 上一个？</li>
</ul></div>

<h1 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h1><div class="note info"><ol>
<li>audio 在安卓上，必须先play() 才能设置currentTime？  待解决</li>
</ol></div>

<h1 id="网址记录"><a href="#网址记录" class="headerlink" title="网址记录"></a>网址记录</h1><p><a href="https://aframe.io/examples/showcase/sky/">官服文档</a><br><a href="https://www.techbrood.com/aframe/introduction?p=javascript-events-dom-apis">中文版</a><br><a href="https://www.wenjiangs.com/doc/hbjap6xb">中文版2</a><br><a href="https://www.aoqiv.com/">音频在线处理</a><br><a href="https://www.icloud.com/iclouddrive/">代码上传icloud</a></p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>aframe</tag>
        <tag>three.js</tag>
      </tags>
  </entry>
  <entry>
    <title>动画及特效</title>
    <url>/2023/03/09/css/animate/</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>记录动画以及特效，持续更新… </p>
</blockquote>
<span id="more"></span>
<h1 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h1><div class="note info"><h2 id="有个强大的animate库"><a href="#有个强大的animate库" class="headerlink" title="有个强大的animate库"></a>有个强大的animate库</h2><p><a href="https://github.com/animate-css/animate.css">源码地址</a><br><a href="https://animate.style/">在线预览</a></p>
<h2 id="keyframes-规则"><a href="#keyframes-规则" class="headerlink" title="@keyframes 规则"></a>@keyframes 规则</h2><p>如果在 @keyframes 规则中指定了 CSS 样式，动画将在特定时间逐渐从当前样式更改为新样式。<br>要使动画生效，必须将动画绑定到某个元素。<br><mark>注意：</mark>未指定 animation-duration 属性，则动画不会发生，因为默认值是 0s（0秒）。</p>
<ol>
<li>动画过程 用<code>from</code> <code>to</code> 或者百分比形式都可以 </li>
<li>属性：<table>
<thead>
<tr>
<th>属性名</th>
<th>简介</th>
</tr>
</thead>
<tbody><tr>
<td>animation-name</td>
<td>要绑定的动画的名字</td>
</tr>
<tr>
<td>animation-duration</td>
<td>动画要多久完成</td>
</tr>
<tr>
<td>animation-delay</td>
<td>动画延迟执行，比如1s后再执行</td>
</tr>
<tr>
<td>animation-fill-mode</td>
<td>结束时样式，none&#x2F;forwards(取最后一帧的样式)&#x2F;backwards(取第一帧)&#x2F;both(开始前元素样式取第一帧，结束后元素样式取最后一帧)</td>
</tr>
<tr>
<td>animation-timing-function</td>
<td>速度曲线。ease - 指定从慢速开始，然后加快，然后缓慢结束的动画（默认）</td>
</tr>
<tr>
<td>linear - 规定从开始到结束的速度相同的动画</td>
<td></td>
</tr>
<tr>
<td>ease-in - 规定慢速开始的动画</td>
<td></td>
</tr>
<tr>
<td>ease-out - 规定慢速结束的动画</td>
<td></td>
</tr>
<tr>
<td>ease-in-out - 指定开始和结束较慢的动画</td>
<td></td>
</tr>
<tr>
<td>cubic-bezier(n,n,n,n) - 运行您在三次贝塞尔函数中定义自己的值</td>
<td></td>
</tr>
<tr>
<td>animation-direction</td>
<td>向前播放、向后播放还是交替播放动画。值有：normal&#x2F;reverse&#x2F;alternate(先向前然后向后)&#x2F;alternate-reverse(先向后然后向前)</td>
</tr>
</tbody></table>
</li>
</ol>
<div class="note "><p>简写形式：名 持续时间 速度 延迟 次数 方向<br><code>animation:example 5s linear 2s infinite alternate</code></p></div>

<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">//设置动画</span></span><br><span class="line"><span class="keyword">@keyframes</span> 动画名&#123;</span><br><span class="line">    from: &#123;<span class="comment">//css样式&#125;</span></span><br><span class="line">    to:   &#123;<span class="comment">//css样式&#125;</span></span><br><span class="line">&#125;</span><br><span class="line">也可以写成</span><br><span class="line"><span class="keyword">@keyframes</span> 动画名&#123;</span><br><span class="line">    <span class="number">50%</span>:   &#123;<span class="comment">//css样式&#125;</span></span><br><span class="line">    <span class="number">100%</span>:  &#123; <span class="comment">//css样式&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用  animation-name</span></span><br><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="comment">//简写形式 名 持续时间 速度 延迟 次数 方向</span></span><br><span class="line">    <span class="attribute">animation</span>: example <span class="number">5s</span> linear <span class="number">2s</span> infinite alternate;</span><br><span class="line">    <span class="comment">//上面的简写相当于下面一堆</span></span><br><span class="line">    <span class="attribute">animation-name</span>: 动画名;</span><br><span class="line">    <span class="attribute">animation-duration</span>: <span class="number">4s</span>;  <span class="comment">//动画多久完成</span></span><br><span class="line">    <span class="attribute">animation-timing-function</span>: linear; <span class="comment">//运动速度</span></span><br><span class="line">    <span class="attribute">animation-delay</span>:<span class="number">4s</span>;     <span class="comment">//延迟时间</span></span><br><span class="line">    <span class="attribute">animation-iteration-count</span>: infinite; <span class="comment">//执行次数</span></span><br><span class="line">    <span class="attribute">animation-direction</span>: alternate; <span class="comment">//运动方向：先向前然后向后</span></span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="特效收集"><a href="#特效收集" class="headerlink" title="特效收集"></a>特效收集</h1><h2 id="按钮类"><a href="#按钮类" class="headerlink" title="按钮类"></a>按钮类</h2><p><a href="https://www.cnblogs.com/wisewrong/p/16266818.html">参考链接</a></p>
<ol>
<li>单向填充<br><img src="https://img2022.cnblogs.com/blog/1059788/202205/1059788-20220513175928558-288332313.gif" alt="单向填充"><br>也可以设置伪元素 after 宽度从 0 过渡为 100%<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">button</span> &#123;</span><br><span class="line">  // 颜色有翻转</span><br><span class="line">  <span class="attr">--bg-color</span>: <span class="number">#555660</span>;</span><br><span class="line">  <span class="attr">--font-color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: transparent;  //可省略</span><br><span class="line">  <span class="attribute">border</span>: none;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">button</span><span class="selector-class">.fill-button</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">var</span>(--font-color);</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="built_in">var</span>(--font-color);</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">8px</span> <span class="number">40px</span>;</span><br><span class="line">   <span class="comment">/* 以下为核心代码 */</span></span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">600ms</span> ease-out;</span><br><span class="line">  <span class="attribute">background-size</span>: <span class="number">200%</span> <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background-position</span>: right bottom;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(to right, <span class="built_in">var</span>(--font-color) <span class="number">50%</span>, <span class="built_in">var</span>(--bg-color) <span class="number">50%</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">button</span><span class="selector-class">.fill-button</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">var</span>(--bg-color);</span><br><span class="line">  <span class="attribute">background-position</span>: left bottom;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="文字类"><a href="#文字类" class="headerlink" title="文字类"></a>文字类</h2><a href="https://blog.csdn.net/xw1680/article/details/118065460">参考链接</a></li>
</ol>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>animate</tag>
      </tags>
  </entry>
</search>
